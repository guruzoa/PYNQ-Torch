// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_weight_2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.745312,HLS_SYN_LAT=17424,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=99,HLS_SYN_FF=6151,HLS_SYN_LUT=11009,HLS_VERSION=2018_2}" *)

module compute_weight_2 (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TLAST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST
);

parameter    ap_ST_fsm_state1 = 104'd1;
parameter    ap_ST_fsm_pp0_stage0 = 104'd2;
parameter    ap_ST_fsm_state6 = 104'd4;
parameter    ap_ST_fsm_state7 = 104'd8;
parameter    ap_ST_fsm_state8 = 104'd16;
parameter    ap_ST_fsm_state9 = 104'd32;
parameter    ap_ST_fsm_state10 = 104'd64;
parameter    ap_ST_fsm_state11 = 104'd128;
parameter    ap_ST_fsm_state12 = 104'd256;
parameter    ap_ST_fsm_state13 = 104'd512;
parameter    ap_ST_fsm_state14 = 104'd1024;
parameter    ap_ST_fsm_state15 = 104'd2048;
parameter    ap_ST_fsm_state16 = 104'd4096;
parameter    ap_ST_fsm_state17 = 104'd8192;
parameter    ap_ST_fsm_state18 = 104'd16384;
parameter    ap_ST_fsm_state19 = 104'd32768;
parameter    ap_ST_fsm_state20 = 104'd65536;
parameter    ap_ST_fsm_state21 = 104'd131072;
parameter    ap_ST_fsm_state22 = 104'd262144;
parameter    ap_ST_fsm_state23 = 104'd524288;
parameter    ap_ST_fsm_state24 = 104'd1048576;
parameter    ap_ST_fsm_state25 = 104'd2097152;
parameter    ap_ST_fsm_state26 = 104'd4194304;
parameter    ap_ST_fsm_state27 = 104'd8388608;
parameter    ap_ST_fsm_state28 = 104'd16777216;
parameter    ap_ST_fsm_state29 = 104'd33554432;
parameter    ap_ST_fsm_state30 = 104'd67108864;
parameter    ap_ST_fsm_state31 = 104'd134217728;
parameter    ap_ST_fsm_state32 = 104'd268435456;
parameter    ap_ST_fsm_state33 = 104'd536870912;
parameter    ap_ST_fsm_state34 = 104'd1073741824;
parameter    ap_ST_fsm_state35 = 104'd2147483648;
parameter    ap_ST_fsm_state36 = 104'd4294967296;
parameter    ap_ST_fsm_state37 = 104'd8589934592;
parameter    ap_ST_fsm_state38 = 104'd17179869184;
parameter    ap_ST_fsm_state39 = 104'd34359738368;
parameter    ap_ST_fsm_state40 = 104'd68719476736;
parameter    ap_ST_fsm_state41 = 104'd137438953472;
parameter    ap_ST_fsm_state42 = 104'd274877906944;
parameter    ap_ST_fsm_state43 = 104'd549755813888;
parameter    ap_ST_fsm_state44 = 104'd1099511627776;
parameter    ap_ST_fsm_state45 = 104'd2199023255552;
parameter    ap_ST_fsm_state46 = 104'd4398046511104;
parameter    ap_ST_fsm_state47 = 104'd8796093022208;
parameter    ap_ST_fsm_state48 = 104'd17592186044416;
parameter    ap_ST_fsm_state49 = 104'd35184372088832;
parameter    ap_ST_fsm_state50 = 104'd70368744177664;
parameter    ap_ST_fsm_state51 = 104'd140737488355328;
parameter    ap_ST_fsm_state52 = 104'd281474976710656;
parameter    ap_ST_fsm_state53 = 104'd562949953421312;
parameter    ap_ST_fsm_state54 = 104'd1125899906842624;
parameter    ap_ST_fsm_state55 = 104'd2251799813685248;
parameter    ap_ST_fsm_state56 = 104'd4503599627370496;
parameter    ap_ST_fsm_state57 = 104'd9007199254740992;
parameter    ap_ST_fsm_state58 = 104'd18014398509481984;
parameter    ap_ST_fsm_state59 = 104'd36028797018963968;
parameter    ap_ST_fsm_state60 = 104'd72057594037927936;
parameter    ap_ST_fsm_state61 = 104'd144115188075855872;
parameter    ap_ST_fsm_state62 = 104'd288230376151711744;
parameter    ap_ST_fsm_state63 = 104'd576460752303423488;
parameter    ap_ST_fsm_state64 = 104'd1152921504606846976;
parameter    ap_ST_fsm_state65 = 104'd2305843009213693952;
parameter    ap_ST_fsm_state66 = 104'd4611686018427387904;
parameter    ap_ST_fsm_state67 = 104'd9223372036854775808;
parameter    ap_ST_fsm_state68 = 104'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 104'd36893488147419103232;
parameter    ap_ST_fsm_state70 = 104'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 104'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 104'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 104'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 104'd1180591620717411303424;
parameter    ap_ST_fsm_state75 = 104'd2361183241434822606848;
parameter    ap_ST_fsm_state76 = 104'd4722366482869645213696;
parameter    ap_ST_fsm_state77 = 104'd9444732965739290427392;
parameter    ap_ST_fsm_state78 = 104'd18889465931478580854784;
parameter    ap_ST_fsm_state79 = 104'd37778931862957161709568;
parameter    ap_ST_fsm_state80 = 104'd75557863725914323419136;
parameter    ap_ST_fsm_state81 = 104'd151115727451828646838272;
parameter    ap_ST_fsm_state82 = 104'd302231454903657293676544;
parameter    ap_ST_fsm_state83 = 104'd604462909807314587353088;
parameter    ap_ST_fsm_state84 = 104'd1208925819614629174706176;
parameter    ap_ST_fsm_state85 = 104'd2417851639229258349412352;
parameter    ap_ST_fsm_state86 = 104'd4835703278458516698824704;
parameter    ap_ST_fsm_state87 = 104'd9671406556917033397649408;
parameter    ap_ST_fsm_state88 = 104'd19342813113834066795298816;
parameter    ap_ST_fsm_state89 = 104'd38685626227668133590597632;
parameter    ap_ST_fsm_state90 = 104'd77371252455336267181195264;
parameter    ap_ST_fsm_state91 = 104'd154742504910672534362390528;
parameter    ap_ST_fsm_state92 = 104'd309485009821345068724781056;
parameter    ap_ST_fsm_state93 = 104'd618970019642690137449562112;
parameter    ap_ST_fsm_state94 = 104'd1237940039285380274899124224;
parameter    ap_ST_fsm_state95 = 104'd2475880078570760549798248448;
parameter    ap_ST_fsm_state96 = 104'd4951760157141521099596496896;
parameter    ap_ST_fsm_state97 = 104'd9903520314283042199192993792;
parameter    ap_ST_fsm_state98 = 104'd19807040628566084398385987584;
parameter    ap_ST_fsm_state99 = 104'd39614081257132168796771975168;
parameter    ap_ST_fsm_state100 = 104'd79228162514264337593543950336;
parameter    ap_ST_fsm_state101 = 104'd158456325028528675187087900672;
parameter    ap_ST_fsm_state102 = 104'd316912650057057350374175801344;
parameter    ap_ST_fsm_state103 = 104'd633825300114114700748351602688;
parameter    ap_ST_fsm_state104 = 104'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state105 = 104'd2535301200456458802993406410752;
parameter    ap_ST_fsm_pp1_stage0 = 104'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state117 = 104'd10141204801825835211973625643008;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input   input_r_TLAST;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output   output_r_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] input_data_0_data_out;
wire    input_data_0_vld_in;
wire    input_data_0_vld_out;
wire    input_data_0_ack_in;
reg    input_data_0_ack_out;
reg   [31:0] input_data_0_payload_A;
reg   [31:0] input_data_0_payload_B;
reg    input_data_0_sel_rd;
reg    input_data_0_sel_wr;
wire    input_data_0_sel;
wire    input_data_0_load_A;
wire    input_data_0_load_B;
reg   [1:0] input_data_0_state;
wire    input_data_0_state_cmp_full;
wire    input_last_0_vld_in;
reg    input_last_0_ack_out;
reg   [1:0] input_last_0_state;
reg   [31:0] output_data_1_data_out;
reg    output_data_1_vld_in;
wire    output_data_1_vld_out;
wire    output_data_1_ack_in;
wire    output_data_1_ack_out;
reg   [31:0] output_data_1_payload_A;
reg   [31:0] output_data_1_payload_B;
reg    output_data_1_sel_rd;
reg    output_data_1_sel_wr;
wire    output_data_1_sel;
wire    output_data_1_load_A;
wire    output_data_1_load_B;
reg   [1:0] output_data_1_state;
wire    output_data_1_state_cmp_full;
reg    output_last_1_data_out;
reg    output_last_1_vld_in;
wire    output_last_1_vld_out;
wire    output_last_1_ack_in;
wire    output_last_1_ack_out;
reg    output_last_1_payload_A;
reg    output_last_1_payload_B;
reg    output_last_1_sel_rd;
reg    output_last_1_sel_wr;
wire    output_last_1_sel;
wire    output_last_1_load_A;
wire    output_last_1_load_B;
reg   [1:0] output_last_1_state;
wire    output_last_1_state_cmp_full;
wire   [11:0] last_address0;
reg    last_ce0;
wire   [0:0] last_q0;
reg    input_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [103:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_2901;
wire    ap_CS_fsm_state32;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter9;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_3692;
reg   [0:0] exitcond_reg_3692_pp1_iter8_reg;
reg    ap_enable_reg_pp1_iter10;
reg   [0:0] exitcond_reg_3692_pp1_iter9_reg;
reg   [12:0] i_reg_732;
reg   [12:0] i_reg_732_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] i_reg_732_pp0_iter2_reg;
reg   [12:0] i_2_reg_811;
wire   [31:0] v_in_V_q0;
reg   [31:0] reg_839;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state88;
wire   [31:0] v_in_V_q1;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
reg   [31:0] reg_844;
wire   [0:0] exitcond1_fu_849_p2;
reg   [0:0] exitcond1_reg_2901_pp0_iter1_reg;
reg   [0:0] exitcond1_reg_2901_pp0_iter2_reg;
wire   [12:0] i_3_fu_855_p2;
reg   [12:0] i_3_reg_2905;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] isneg_reg_2910;
reg   [0:0] isneg_reg_2910_pp0_iter2_reg;
reg   [10:0] exp_tmp_V_reg_2916;
wire   [51:0] tmp_106_fu_887_p1;
reg   [51:0] tmp_106_reg_2921;
wire   [0:0] tmp_31_fu_891_p2;
reg   [0:0] tmp_31_reg_2926;
reg   [0:0] tmp_31_reg_2926_pp0_iter2_reg;
wire   [53:0] man_V_2_fu_917_p3;
reg   [53:0] man_V_2_reg_2932;
wire  signed [11:0] sh_amt_fu_948_p3;
reg  signed [11:0] sh_amt_reg_2937;
wire   [0:0] tmp_37_fu_956_p2;
reg   [0:0] tmp_37_reg_2943;
wire   [31:0] tmp_107_fu_962_p1;
reg   [31:0] tmp_107_reg_2948;
wire   [0:0] sel_tmp7_fu_993_p2;
reg   [0:0] sel_tmp7_reg_2954;
wire   [0:0] sel_tmp22_fu_1011_p2;
reg   [0:0] sel_tmp22_reg_2960;
wire   [0:0] exitcond2_fu_1129_p2;
wire    ap_CS_fsm_state7;
wire   [6:0] i_5_fu_1135_p2;
reg   [6:0] i_5_reg_2970;
wire   [12:0] counter_2_fu_1146_p2;
reg   [12:0] counter_2_reg_2980;
wire    ap_CS_fsm_state9;
wire   [47:0] tmp_81_cast_fu_1156_p2;
reg   [47:0] tmp_81_cast_reg_2985;
reg   [31:0] tmp_84_reg_3008;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond3_fu_1162_p2;
wire   [12:0] tmp_94_s_fu_1214_p2;
reg   [12:0] tmp_94_s_reg_3013;
reg   [31:0] tmp_88_reg_3018;
wire    ap_CS_fsm_state11;
reg   [31:0] tmp_90_reg_3023;
wire    ap_CS_fsm_state12;
reg   [31:0] tmp_92_reg_3028;
wire    ap_CS_fsm_state13;
reg   [31:0] tmp_94_reg_3033;
wire    ap_CS_fsm_state14;
reg   [31:0] tmp_96_reg_3038;
wire    ap_CS_fsm_state15;
reg   [31:0] tmp_98_reg_3043;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [0:0] isneg_1_reg_3053;
reg   [10:0] exp_tmp_V_1_reg_3059;
wire   [51:0] tmp_114_fu_1561_p1;
reg   [51:0] tmp_114_reg_3064;
wire   [0:0] tmp_47_fu_1565_p2;
reg   [0:0] tmp_47_reg_3069;
wire   [53:0] man_V_5_fu_1591_p3;
reg   [53:0] man_V_5_reg_3075;
wire    ap_CS_fsm_state33;
wire   [0:0] tmp_52_fu_1604_p2;
reg   [0:0] tmp_52_reg_3080;
wire  signed [11:0] sh_amt_1_fu_1622_p3;
reg  signed [11:0] sh_amt_1_reg_3086;
wire   [0:0] tmp_55_fu_1630_p2;
reg   [0:0] tmp_55_reg_3092;
wire   [31:0] tmp_115_fu_1636_p1;
reg   [31:0] tmp_115_reg_3098;
wire   [0:0] icmp1_fu_1650_p2;
reg   [0:0] icmp1_reg_3104;
wire   [23:0] grp_sqrt_fixed_32_16_s_fu_822_ap_return;
reg   [23:0] agg_result_V_i_reg_3109;
wire    ap_CS_fsm_state34;
wire   [31:0] tmp_81_fu_1789_p3;
reg   [31:0] tmp_81_reg_3114;
wire    ap_CS_fsm_state35;
wire  signed [47:0] OP2_V_1_cast_fu_1817_p1;
reg  signed [47:0] OP2_V_1_cast_reg_3129;
wire    ap_CS_fsm_state86;
wire   [63:0] tmp_85_fu_1827_p1;
reg   [63:0] tmp_85_reg_3168;
wire    ap_CS_fsm_state87;
wire   [0:0] exitcond4_fu_1821_p2;
wire   [11:0] tmp_119_fu_1832_p1;
reg   [11:0] tmp_119_reg_3178;
wire   [63:0] tmp_121_1_fu_1842_p1;
reg   [63:0] tmp_121_1_reg_3212;
wire   [12:0] tmp_124_31_fu_1847_p2;
reg   [12:0] tmp_124_31_reg_3222;
wire   [12:0] indvars_iv_next_fu_1853_p2;
wire   [63:0] tmp_121_2_fu_1864_p1;
reg   [63:0] tmp_121_2_reg_3232;
wire   [63:0] tmp_121_3_fu_1874_p1;
reg   [63:0] tmp_121_3_reg_3242;
reg   [31:0] tmp_87_reg_3252;
reg   [31:0] tmp_123_1_reg_3257;
wire   [63:0] tmp_121_4_fu_1922_p1;
reg   [63:0] tmp_121_4_reg_3262;
wire   [63:0] tmp_121_5_fu_1932_p1;
reg   [63:0] tmp_121_5_reg_3272;
reg   [31:0] tmp_123_2_reg_3282;
reg   [31:0] tmp_123_3_reg_3287;
wire   [63:0] tmp_121_6_fu_1980_p1;
reg   [63:0] tmp_121_6_reg_3292;
wire   [63:0] tmp_121_7_fu_1990_p1;
reg   [63:0] tmp_121_7_reg_3302;
reg   [31:0] tmp_123_4_reg_3312;
reg   [31:0] tmp_123_5_reg_3317;
wire   [63:0] tmp_121_8_fu_2038_p1;
reg   [63:0] tmp_121_8_reg_3322;
wire   [63:0] tmp_121_9_fu_2048_p1;
reg   [63:0] tmp_121_9_reg_3332;
reg   [31:0] tmp_123_6_reg_3342;
reg   [31:0] tmp_123_7_reg_3347;
wire   [63:0] tmp_121_s_fu_2096_p1;
reg   [63:0] tmp_121_s_reg_3352;
wire   [63:0] tmp_121_10_fu_2106_p1;
reg   [63:0] tmp_121_10_reg_3362;
reg   [31:0] tmp_123_8_reg_3372;
reg   [31:0] tmp_123_9_reg_3377;
wire   [63:0] tmp_121_11_fu_2154_p1;
reg   [63:0] tmp_121_11_reg_3382;
wire   [63:0] tmp_121_12_fu_2164_p1;
reg   [63:0] tmp_121_12_reg_3392;
reg   [31:0] tmp_123_s_reg_3402;
reg   [31:0] tmp_123_10_reg_3407;
wire   [63:0] tmp_121_13_fu_2212_p1;
reg   [63:0] tmp_121_13_reg_3412;
wire   [63:0] tmp_121_14_fu_2222_p1;
reg   [63:0] tmp_121_14_reg_3422;
reg   [31:0] tmp_123_11_reg_3432;
reg   [31:0] tmp_123_12_reg_3437;
wire   [63:0] tmp_121_15_fu_2270_p1;
reg   [63:0] tmp_121_15_reg_3442;
wire   [63:0] tmp_121_16_fu_2280_p1;
reg   [63:0] tmp_121_16_reg_3452;
reg   [31:0] tmp_123_13_reg_3462;
reg   [31:0] tmp_123_14_reg_3467;
wire   [63:0] tmp_121_17_fu_2328_p1;
reg   [63:0] tmp_121_17_reg_3472;
wire   [63:0] tmp_121_18_fu_2338_p1;
reg   [63:0] tmp_121_18_reg_3482;
reg   [31:0] tmp_123_15_reg_3492;
reg   [31:0] tmp_123_16_reg_3497;
wire   [63:0] tmp_121_19_fu_2386_p1;
reg   [63:0] tmp_121_19_reg_3502;
wire   [63:0] tmp_121_20_fu_2396_p1;
reg   [63:0] tmp_121_20_reg_3512;
reg   [31:0] tmp_123_17_reg_3522;
reg   [31:0] tmp_123_18_reg_3527;
wire   [63:0] tmp_121_21_fu_2444_p1;
reg   [63:0] tmp_121_21_reg_3532;
wire   [63:0] tmp_121_22_fu_2454_p1;
reg   [63:0] tmp_121_22_reg_3542;
reg   [31:0] tmp_123_19_reg_3552;
reg   [31:0] tmp_123_20_reg_3557;
wire   [63:0] tmp_121_23_fu_2502_p1;
reg   [63:0] tmp_121_23_reg_3562;
wire   [63:0] tmp_121_24_fu_2512_p1;
reg   [63:0] tmp_121_24_reg_3572;
reg   [31:0] tmp_123_21_reg_3582;
reg   [31:0] tmp_123_22_reg_3587;
wire   [63:0] tmp_121_25_fu_2560_p1;
reg   [63:0] tmp_121_25_reg_3592;
wire   [63:0] tmp_121_26_fu_2570_p1;
reg   [63:0] tmp_121_26_reg_3602;
reg   [31:0] tmp_123_23_reg_3612;
reg   [31:0] tmp_123_24_reg_3617;
wire   [63:0] tmp_121_27_fu_2618_p1;
reg   [63:0] tmp_121_27_reg_3622;
wire   [63:0] tmp_121_28_fu_2628_p1;
reg   [63:0] tmp_121_28_reg_3632;
reg   [31:0] tmp_123_25_reg_3642;
reg   [31:0] tmp_123_26_reg_3647;
wire   [63:0] tmp_121_29_fu_2676_p1;
reg   [63:0] tmp_121_29_reg_3652;
wire   [63:0] tmp_121_30_fu_2686_p1;
reg   [63:0] tmp_121_30_reg_3662;
reg   [31:0] tmp_123_27_reg_3672;
reg   [31:0] tmp_123_28_reg_3677;
reg   [31:0] tmp_123_29_reg_3682;
wire    ap_CS_fsm_state104;
reg   [31:0] tmp_123_30_reg_3687;
wire   [0:0] exitcond_fu_2767_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state106_pp1_stage0_iter0;
wire    ap_block_state107_pp1_stage0_iter1;
wire    ap_block_state108_pp1_stage0_iter2;
wire    ap_block_state109_pp1_stage0_iter3;
wire    ap_block_state110_pp1_stage0_iter4;
wire    ap_block_state111_pp1_stage0_iter5;
wire    ap_block_state112_pp1_stage0_iter6;
wire    ap_block_state113_pp1_stage0_iter7;
wire    ap_block_state114_pp1_stage0_iter8;
wire    ap_block_state115_pp1_stage0_iter9;
reg    ap_block_state115_io;
wire    ap_block_state116_pp1_stage0_iter10;
reg    ap_block_state116_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_reg_3692_pp1_iter1_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter2_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter3_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter4_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter5_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter6_reg;
reg   [0:0] exitcond_reg_3692_pp1_iter7_reg;
wire   [12:0] i_4_fu_2773_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] output_temp_V_q0;
reg   [31:0] p_Val2_7_reg_3711;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] is_neg_reg_3717;
reg   [0:0] is_neg_reg_3717_pp1_iter2_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter3_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter4_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter5_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter6_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter7_reg;
reg   [0:0] is_neg_reg_3717_pp1_iter8_reg;
wire   [31:0] tmp_41_fu_2793_p2;
reg   [31:0] tmp_41_reg_3723;
reg   [0:0] last_load_reg_3728;
reg   [0:0] last_load_reg_3728_pp1_iter2_reg;
reg   [0:0] last_load_reg_3728_pp1_iter3_reg;
reg   [0:0] last_load_reg_3728_pp1_iter4_reg;
reg   [0:0] last_load_reg_3728_pp1_iter5_reg;
reg   [0:0] last_load_reg_3728_pp1_iter6_reg;
reg   [0:0] last_load_reg_3728_pp1_iter7_reg;
reg   [0:0] last_load_reg_3728_pp1_iter8_reg;
wire   [0:0] tmp_39_fu_2799_p2;
reg   [0:0] tmp_39_reg_3733;
reg   [0:0] tmp_39_reg_3733_pp1_iter3_reg;
reg   [0:0] tmp_39_reg_3733_pp1_iter4_reg;
reg   [0:0] tmp_39_reg_3733_pp1_iter5_reg;
reg   [0:0] tmp_39_reg_3733_pp1_iter6_reg;
reg   [0:0] tmp_39_reg_3733_pp1_iter7_reg;
reg   [0:0] tmp_39_reg_3733_pp1_iter8_reg;
wire   [31:0] tmp32_V_1_fu_2827_p2;
reg   [31:0] tmp32_V_1_reg_3738;
wire   [7:0] tmp_111_fu_2833_p1;
reg   [7:0] tmp_111_reg_3743;
reg   [7:0] tmp_111_reg_3743_pp1_iter3_reg;
reg   [7:0] tmp_111_reg_3743_pp1_iter4_reg;
reg   [7:0] tmp_111_reg_3743_pp1_iter5_reg;
reg   [7:0] tmp_111_reg_3743_pp1_iter6_reg;
reg   [7:0] tmp_111_reg_3743_pp1_iter7_reg;
reg   [7:0] tmp_111_reg_3743_pp1_iter8_reg;
wire   [31:0] tmp32_V_fu_2837_p1;
reg   [31:0] tmp32_V_reg_3748;
wire   [0:0] tmp_42_fu_2851_p2;
reg   [0:0] tmp_42_reg_3753;
wire   [31:0] p_03_i_fu_2893_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state106;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg   [11:0] v_in_V_address0;
reg    v_in_V_ce0;
reg    v_in_V_we0;
wire   [31:0] v_in_V_d0;
reg   [11:0] v_in_V_address1;
reg    v_in_V_ce1;
reg   [11:0] output_temp_V_address0;
reg    output_temp_V_ce0;
reg    output_temp_V_we0;
reg   [31:0] output_temp_V_d0;
reg   [11:0] output_temp_V_address1;
reg    output_temp_V_ce1;
reg    output_temp_V_we1;
reg   [31:0] output_temp_V_d1;
reg   [12:0] ap_phi_mux_i_phi_fu_736_p4;
reg   [12:0] indvars_iv_reg_744;
wire    ap_CS_fsm_state6;
reg   [6:0] i_1_reg_756;
reg   [12:0] counter_reg_767;
reg   [31:0] norm_V_addr_loc_reg_779;
reg   [12:0] counter_s_reg_791;
reg   [12:0] counter2_1_reg_801;
wire    ap_CS_fsm_state105;
wire   [63:0] tmp_fu_1017_p1;
wire   [63:0] tmp_32_fu_1141_p1;
wire   [63:0] tmp_38_fu_2779_p1;
wire    ap_block_pp1_stage0_01001;
wire   [63:0] grp_fu_831_p1;
wire   [63:0] ireg_V_fu_861_p1;
wire   [62:0] tmp_104_fu_865_p1;
wire   [52:0] tmp_66_fu_900_p3;
wire   [53:0] p_Result_s_fu_907_p1;
wire   [53:0] man_V_1_fu_911_p2;
wire   [11:0] tmp_s_fu_897_p1;
wire   [11:0] F2_fu_924_p2;
wire   [0:0] tmp_34_fu_930_p2;
wire   [11:0] tmp_35_fu_936_p2;
wire   [11:0] tmp_36_fu_942_p2;
wire   [6:0] tmp_108_fu_966_p4;
wire   [0:0] sel_tmp6_demorgan_fu_982_p2;
wire   [0:0] sel_tmp6_fu_987_p2;
wire   [0:0] sel_tmp21_demorgan_fu_999_p2;
wire   [0:0] icmp_fu_976_p2;
wire   [0:0] sel_tmp21_fu_1005_p2;
wire  signed [31:0] sh_amt_cast_fu_1022_p1;
wire   [53:0] tmp_56_fu_1030_p1;
wire   [53:0] tmp_57_fu_1034_p2;
wire   [0:0] sel_tmp1_fu_1055_p2;
wire   [0:0] tmp_48_fu_1025_p2;
wire   [0:0] sel_tmp8_fu_1065_p2;
wire   [31:0] tmp_59_fu_1050_p2;
wire   [31:0] tmp_109_fu_1039_p1;
wire   [0:0] sel_tmp15_fu_1076_p2;
wire   [0:0] sel_tmp9_fu_1071_p2;
wire   [31:0] storemerge_fu_1043_p3;
wire   [0:0] sel_tmp2_fu_1060_p2;
wire   [0:0] or_cond_fu_1088_p2;
wire   [31:0] newSel_fu_1081_p3;
wire   [31:0] newSel1_fu_1093_p3;
wire   [0:0] or_cond1_fu_1100_p2;
wire   [0:0] or_cond2_fu_1114_p2;
wire   [31:0] newSel2_fu_1106_p3;
wire  signed [31:0] tmp_81_cast_fu_1156_p0;
wire  signed [47:0] tmp_67_fu_1152_p1;
wire  signed [31:0] tmp_81_cast_fu_1156_p1;
wire   [47:0] tmp_82_fu_1168_p3;
wire   [47:0] p_Val2_s_fu_1176_p2;
wire   [31:0] tmp_83_fu_1181_p4;
wire   [47:0] tmp_90_1_fu_1191_p3;
wire   [47:0] p_Val2_68_1_fu_1199_p2;
wire   [47:0] tmp_90_2_fu_1220_p3;
wire   [47:0] p_Val2_68_2_fu_1227_p2;
wire   [31:0] tmp_86_fu_1232_p4;
wire   [47:0] tmp_90_3_fu_1242_p3;
wire   [47:0] p_Val2_68_3_fu_1250_p2;
wire   [47:0] tmp_90_4_fu_1265_p3;
wire   [47:0] p_Val2_68_4_fu_1272_p2;
wire   [31:0] tmp_89_fu_1277_p4;
wire   [47:0] tmp_90_5_fu_1287_p3;
wire   [47:0] p_Val2_68_5_fu_1295_p2;
wire   [47:0] tmp_90_6_fu_1310_p3;
wire   [47:0] p_Val2_68_6_fu_1317_p2;
wire   [31:0] tmp_91_fu_1322_p4;
wire   [47:0] tmp_90_7_fu_1332_p3;
wire   [47:0] p_Val2_68_7_fu_1340_p2;
wire   [47:0] tmp_90_8_fu_1355_p3;
wire   [47:0] p_Val2_68_8_fu_1362_p2;
wire   [31:0] tmp_93_fu_1367_p4;
wire   [47:0] tmp_90_9_fu_1377_p3;
wire   [47:0] p_Val2_68_9_fu_1385_p2;
wire   [47:0] tmp_90_s_fu_1400_p3;
wire   [47:0] p_Val2_68_s_fu_1407_p2;
wire   [31:0] tmp_95_fu_1412_p4;
wire   [47:0] tmp_90_10_fu_1422_p3;
wire   [47:0] p_Val2_68_10_fu_1430_p2;
wire   [47:0] tmp_90_11_fu_1445_p3;
wire   [47:0] p_Val2_68_11_fu_1452_p2;
wire   [31:0] tmp_97_fu_1457_p4;
wire   [47:0] tmp_90_12_fu_1467_p3;
wire   [47:0] p_Val2_68_12_fu_1475_p2;
wire   [47:0] tmp_90_13_fu_1490_p3;
wire   [47:0] p_Val2_68_13_fu_1497_p2;
wire   [31:0] tmp_99_fu_1502_p4;
wire   [47:0] tmp_90_14_fu_1512_p3;
wire   [47:0] p_Val2_68_14_fu_1520_p2;
wire   [63:0] ireg_V_1_fu_1535_p1;
wire   [62:0] tmp_112_fu_1539_p1;
wire   [52:0] tmp_72_fu_1574_p3;
wire   [53:0] p_Result_1_fu_1581_p1;
wire   [53:0] man_V_4_fu_1585_p2;
wire   [11:0] tmp_45_fu_1571_p1;
wire   [11:0] F2_1_fu_1598_p2;
wire   [11:0] tmp_53_fu_1610_p2;
wire   [11:0] tmp_54_fu_1616_p2;
wire   [6:0] tmp_116_fu_1640_p4;
wire  signed [31:0] sh_amt_1_cast_fu_1656_p1;
wire   [53:0] tmp_64_fu_1664_p1;
wire   [0:0] sel_tmp26_fu_1678_p2;
wire   [0:0] sel_tmp31_demorgan_fu_1688_p2;
wire   [0:0] sel_tmp31_fu_1692_p2;
wire   [0:0] tmp_61_fu_1659_p2;
wire   [0:0] sel_tmp32_fu_1698_p2;
wire   [0:0] sel_tmp33_fu_1703_p2;
wire   [0:0] sel_tmp46_demorgan_fu_1721_p2;
wire   [0:0] sel_tmp46_fu_1726_p2;
wire   [0:0] sel_tmp47_fu_1732_p2;
wire   [0:0] sel_tmp40_fu_1715_p2;
wire   [0:0] sel_tmp34_fu_1709_p2;
wire   [0:0] sel_tmp27_fu_1683_p2;
wire   [0:0] or_cond3_fu_1737_p2;
wire   [0:0] or_cond4_fu_1743_p2;
wire   [53:0] tmp_65_fu_1668_p2;
wire   [31:0] tmp_73_fu_1673_p2;
wire   [31:0] tmp_117_fu_1755_p1;
wire   [31:0] tmp_75_fu_1767_p3;
wire   [31:0] tmp_74_fu_1759_p3;
wire   [31:0] tmp_76_fu_1774_p3;
wire   [0:0] or_cond5_fu_1749_p2;
wire   [31:0] tmp_80_fu_1781_p3;
wire   [47:0] grp_fu_1807_p0;
wire   [24:0] grp_fu_1807_p1;
wire   [31:0] grp_fu_1807_p2;
wire   [31:0] tmp_118_fu_1813_p1;
wire   [11:0] tmp_124_s_fu_1836_p2;
wire   [11:0] tmp_124_1_fu_1859_p2;
wire   [11:0] tmp_124_2_fu_1869_p2;
wire  signed [31:0] p_Val2_5_fu_1883_p0;
wire  signed [31:0] p_Val2_5_fu_1883_p1;
wire   [47:0] p_Val2_5_fu_1883_p2;
wire  signed [31:0] p_Val2_75_1_fu_1902_p0;
wire  signed [31:0] p_Val2_75_1_fu_1902_p1;
wire   [47:0] p_Val2_75_1_fu_1902_p2;
wire   [11:0] tmp_124_3_fu_1917_p2;
wire   [11:0] tmp_124_4_fu_1927_p2;
wire  signed [31:0] p_Val2_75_2_fu_1941_p0;
wire  signed [31:0] p_Val2_75_2_fu_1941_p1;
wire   [47:0] p_Val2_75_2_fu_1941_p2;
wire  signed [31:0] p_Val2_75_3_fu_1960_p0;
wire  signed [31:0] p_Val2_75_3_fu_1960_p1;
wire   [47:0] p_Val2_75_3_fu_1960_p2;
wire   [11:0] tmp_124_5_fu_1975_p2;
wire   [11:0] tmp_124_6_fu_1985_p2;
wire  signed [31:0] p_Val2_75_4_fu_1999_p0;
wire  signed [31:0] p_Val2_75_4_fu_1999_p1;
wire   [47:0] p_Val2_75_4_fu_1999_p2;
wire  signed [31:0] p_Val2_75_5_fu_2018_p0;
wire  signed [31:0] p_Val2_75_5_fu_2018_p1;
wire   [47:0] p_Val2_75_5_fu_2018_p2;
wire   [11:0] tmp_124_7_fu_2033_p2;
wire   [11:0] tmp_124_8_fu_2043_p2;
wire  signed [31:0] p_Val2_75_6_fu_2057_p0;
wire  signed [31:0] p_Val2_75_6_fu_2057_p1;
wire   [47:0] p_Val2_75_6_fu_2057_p2;
wire  signed [31:0] p_Val2_75_7_fu_2076_p0;
wire  signed [31:0] p_Val2_75_7_fu_2076_p1;
wire   [47:0] p_Val2_75_7_fu_2076_p2;
wire   [11:0] tmp_124_9_fu_2091_p2;
wire   [11:0] tmp_124_10_fu_2101_p2;
wire  signed [31:0] p_Val2_75_8_fu_2115_p0;
wire  signed [31:0] p_Val2_75_8_fu_2115_p1;
wire   [47:0] p_Val2_75_8_fu_2115_p2;
wire  signed [31:0] p_Val2_75_9_fu_2134_p0;
wire  signed [31:0] p_Val2_75_9_fu_2134_p1;
wire   [47:0] p_Val2_75_9_fu_2134_p2;
wire   [11:0] tmp_124_11_fu_2149_p2;
wire   [11:0] tmp_124_12_fu_2159_p2;
wire  signed [31:0] p_Val2_75_s_fu_2173_p0;
wire  signed [31:0] p_Val2_75_s_fu_2173_p1;
wire   [47:0] p_Val2_75_s_fu_2173_p2;
wire  signed [31:0] p_Val2_75_10_fu_2192_p0;
wire  signed [31:0] p_Val2_75_10_fu_2192_p1;
wire   [47:0] p_Val2_75_10_fu_2192_p2;
wire   [11:0] tmp_124_13_fu_2207_p2;
wire   [11:0] tmp_124_14_fu_2217_p2;
wire  signed [31:0] p_Val2_75_11_fu_2231_p0;
wire  signed [31:0] p_Val2_75_11_fu_2231_p1;
wire   [47:0] p_Val2_75_11_fu_2231_p2;
wire  signed [31:0] p_Val2_75_12_fu_2250_p0;
wire  signed [31:0] p_Val2_75_12_fu_2250_p1;
wire   [47:0] p_Val2_75_12_fu_2250_p2;
wire   [11:0] tmp_124_15_fu_2265_p2;
wire   [11:0] tmp_124_16_fu_2275_p2;
wire  signed [31:0] p_Val2_75_13_fu_2289_p0;
wire  signed [31:0] p_Val2_75_13_fu_2289_p1;
wire   [47:0] p_Val2_75_13_fu_2289_p2;
wire  signed [31:0] p_Val2_75_14_fu_2308_p0;
wire  signed [31:0] p_Val2_75_14_fu_2308_p1;
wire   [47:0] p_Val2_75_14_fu_2308_p2;
wire   [11:0] tmp_124_17_fu_2323_p2;
wire   [11:0] tmp_124_18_fu_2333_p2;
wire  signed [31:0] p_Val2_75_15_fu_2347_p0;
wire  signed [31:0] p_Val2_75_15_fu_2347_p1;
wire   [47:0] p_Val2_75_15_fu_2347_p2;
wire  signed [31:0] p_Val2_75_16_fu_2366_p0;
wire  signed [31:0] p_Val2_75_16_fu_2366_p1;
wire   [47:0] p_Val2_75_16_fu_2366_p2;
wire   [11:0] tmp_124_19_fu_2381_p2;
wire   [11:0] tmp_124_20_fu_2391_p2;
wire  signed [31:0] p_Val2_75_17_fu_2405_p0;
wire  signed [31:0] p_Val2_75_17_fu_2405_p1;
wire   [47:0] p_Val2_75_17_fu_2405_p2;
wire  signed [31:0] p_Val2_75_18_fu_2424_p0;
wire  signed [31:0] p_Val2_75_18_fu_2424_p1;
wire   [47:0] p_Val2_75_18_fu_2424_p2;
wire   [11:0] tmp_124_21_fu_2439_p2;
wire   [11:0] tmp_124_22_fu_2449_p2;
wire  signed [31:0] p_Val2_75_19_fu_2463_p0;
wire  signed [31:0] p_Val2_75_19_fu_2463_p1;
wire   [47:0] p_Val2_75_19_fu_2463_p2;
wire  signed [31:0] p_Val2_75_20_fu_2482_p0;
wire  signed [31:0] p_Val2_75_20_fu_2482_p1;
wire   [47:0] p_Val2_75_20_fu_2482_p2;
wire   [11:0] tmp_124_23_fu_2497_p2;
wire   [11:0] tmp_124_24_fu_2507_p2;
wire  signed [31:0] p_Val2_75_21_fu_2521_p0;
wire  signed [31:0] p_Val2_75_21_fu_2521_p1;
wire   [47:0] p_Val2_75_21_fu_2521_p2;
wire  signed [31:0] p_Val2_75_22_fu_2540_p0;
wire  signed [31:0] p_Val2_75_22_fu_2540_p1;
wire   [47:0] p_Val2_75_22_fu_2540_p2;
wire   [11:0] tmp_124_25_fu_2555_p2;
wire   [11:0] tmp_124_26_fu_2565_p2;
wire  signed [31:0] p_Val2_75_23_fu_2579_p0;
wire  signed [31:0] p_Val2_75_23_fu_2579_p1;
wire   [47:0] p_Val2_75_23_fu_2579_p2;
wire  signed [31:0] p_Val2_75_24_fu_2598_p0;
wire  signed [31:0] p_Val2_75_24_fu_2598_p1;
wire   [47:0] p_Val2_75_24_fu_2598_p2;
wire   [11:0] tmp_124_27_fu_2613_p2;
wire   [11:0] tmp_124_28_fu_2623_p2;
wire  signed [31:0] p_Val2_75_25_fu_2637_p0;
wire  signed [31:0] p_Val2_75_25_fu_2637_p1;
wire   [47:0] p_Val2_75_25_fu_2637_p2;
wire  signed [31:0] p_Val2_75_26_fu_2656_p0;
wire  signed [31:0] p_Val2_75_26_fu_2656_p1;
wire   [47:0] p_Val2_75_26_fu_2656_p2;
wire   [11:0] tmp_124_29_fu_2671_p2;
wire   [11:0] tmp_124_30_fu_2681_p2;
wire  signed [31:0] p_Val2_75_27_fu_2695_p0;
wire  signed [31:0] p_Val2_75_27_fu_2695_p1;
wire   [47:0] p_Val2_75_27_fu_2695_p2;
wire  signed [31:0] p_Val2_75_28_fu_2714_p0;
wire  signed [31:0] p_Val2_75_28_fu_2714_p1;
wire   [47:0] p_Val2_75_28_fu_2714_p2;
wire  signed [31:0] p_Val2_75_29_fu_2733_p0;
wire  signed [31:0] p_Val2_75_29_fu_2733_p1;
wire   [47:0] p_Val2_75_29_fu_2733_p2;
wire  signed [31:0] p_Val2_75_30_fu_2752_p0;
wire  signed [31:0] p_Val2_75_30_fu_2752_p1;
wire   [47:0] p_Val2_75_30_fu_2752_p2;
wire   [31:0] p_Val2_s_54_fu_2804_p3;
reg   [31:0] p_Result_2_fu_2809_p4;
reg   [31:0] num_zeros_fu_2819_p3;
wire   [31:0] grp_fu_828_p1;
wire   [7:0] p_Result_4_fu_2841_p4;
wire   [7:0] tmp_69_fu_2857_p2;
wire   [7:0] tmp_70_fu_2862_p1;
wire   [7:0] p_Repl2_12_trunc_fu_2865_p2;
wire   [8:0] tmp_71_fu_2871_p3;
wire   [31:0] p_Result_3_fu_2878_p5;
wire   [31:0] f_fu_2889_p1;
reg    grp_fu_828_ce;
reg    grp_fu_1807_ap_start;
wire    grp_fu_1807_ap_done;
reg   [103:0] ap_NS_fsm;
wire    ap_CS_fsm_state117;
reg    ap_block_state117;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [47:0] grp_fu_1807_p10;

// power-on initialization
initial begin
#0 input_data_0_sel_rd = 1'b0;
#0 input_data_0_sel_wr = 1'b0;
#0 input_data_0_state = 2'd0;
#0 input_last_0_state = 2'd0;
#0 output_data_1_sel_rd = 1'b0;
#0 output_data_1_sel_wr = 1'b0;
#0 output_data_1_state = 2'd0;
#0 output_last_1_sel_rd = 1'b0;
#0 output_last_1_sel_wr = 1'b0;
#0 output_last_1_state = 2'd0;
#0 ap_CS_fsm = 104'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
end

compute_weight_2_bkb #(
    .DataWidth( 1 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
last_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(last_address0),
    .ce0(last_ce0),
    .q0(last_q0)
);

compute_weight_2_cud #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
v_in_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v_in_V_address0),
    .ce0(v_in_V_ce0),
    .we0(v_in_V_we0),
    .d0(v_in_V_d0),
    .q0(v_in_V_q0),
    .address1(v_in_V_address1),
    .ce1(v_in_V_ce1),
    .q1(v_in_V_q1)
);

compute_weight_2_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
output_temp_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_temp_V_address0),
    .ce0(output_temp_V_ce0),
    .we0(output_temp_V_we0),
    .d0(output_temp_V_d0),
    .q0(output_temp_V_q0),
    .address1(output_temp_V_address1),
    .ce1(output_temp_V_ce1),
    .we1(output_temp_V_we1),
    .d1(output_temp_V_d1)
);

sqrt_fixed_32_16_s grp_sqrt_fixed_32_16_s_fu_822(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(norm_V_addr_loc_reg_779),
    .ap_return(grp_sqrt_fixed_32_16_s_fu_822_ap_return)
);

compute_weight_2_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
compute_weight_2_eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp32_V_1_reg_3738),
    .ce(grp_fu_828_ce),
    .dout(grp_fu_828_p1)
);

compute_weight_2_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
compute_weight_2_fYi_U3(
    .din0(input_data_0_data_out),
    .dout(grp_fu_831_p1)
);

compute_weight_2_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 52 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 32 ))
compute_weight_2_g8j_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1807_ap_start),
    .done(grp_fu_1807_ap_done),
    .din0(grp_fu_1807_p0),
    .din1(grp_fu_1807_p1),
    .ce(1'b1),
    .dout(grp_fu_1807_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state106) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_1129_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state106)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state106);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_1129_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_0_ack_out == 1'b1) & (input_data_0_vld_out == 1'b1))) begin
            input_data_0_sel_rd <= ~input_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_0_ack_in == 1'b1) & (input_data_0_vld_in == 1'b1))) begin
            input_data_0_sel_wr <= ~input_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_0_state <= 2'd0;
    end else begin
        if ((((input_data_0_vld_in == 1'b0) & (input_data_0_state == 2'd2)) | ((input_data_0_vld_in == 1'b0) & (input_data_0_ack_out == 1'b1) & (input_data_0_state == 2'd3)))) begin
            input_data_0_state <= 2'd2;
        end else if ((((input_data_0_ack_out == 1'b0) & (input_data_0_state == 2'd1)) | ((input_data_0_ack_out == 1'b0) & (input_data_0_vld_in == 1'b1) & (input_data_0_state == 2'd3)))) begin
            input_data_0_state <= 2'd1;
        end else if (((~((input_data_0_vld_in == 1'b0) & (input_data_0_ack_out == 1'b1)) & ~((input_data_0_ack_out == 1'b0) & (input_data_0_vld_in == 1'b1)) & (input_data_0_state == 2'd3)) | ((input_data_0_ack_out == 1'b1) & (input_data_0_state == 2'd1)) | ((input_data_0_vld_in == 1'b1) & (input_data_0_state == 2'd2)))) begin
            input_data_0_state <= 2'd3;
        end else begin
            input_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_last_0_state <= 2'd0;
    end else begin
        if ((((input_last_0_vld_in == 1'b0) & (input_last_0_state == 2'd2)) | ((input_last_0_vld_in == 1'b0) & (input_last_0_ack_out == 1'b1) & (input_last_0_state == 2'd3)))) begin
            input_last_0_state <= 2'd2;
        end else if ((((input_last_0_ack_out == 1'b0) & (input_last_0_state == 2'd1)) | ((input_last_0_ack_out == 1'b0) & (input_last_0_vld_in == 1'b1) & (input_last_0_state == 2'd3)))) begin
            input_last_0_state <= 2'd1;
        end else if (((~((input_last_0_vld_in == 1'b0) & (input_last_0_ack_out == 1'b1)) & ~((input_last_0_ack_out == 1'b0) & (input_last_0_vld_in == 1'b1)) & (input_last_0_state == 2'd3)) | ((input_last_0_ack_out == 1'b1) & (input_last_0_state == 2'd1)) | ((input_last_0_vld_in == 1'b1) & (input_last_0_state == 2'd2)))) begin
            input_last_0_state <= 2'd3;
        end else begin
            input_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_1_ack_out == 1'b1) & (output_data_1_vld_out == 1'b1))) begin
            output_data_1_sel_rd <= ~output_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_1_ack_in == 1'b1) & (output_data_1_vld_in == 1'b1))) begin
            output_data_1_sel_wr <= ~output_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_1_state <= 2'd0;
    end else begin
        if ((((output_data_1_vld_in == 1'b0) & (output_data_1_state == 2'd2)) | ((output_data_1_vld_in == 1'b0) & (output_data_1_ack_out == 1'b1) & (output_data_1_state == 2'd3)))) begin
            output_data_1_state <= 2'd2;
        end else if ((((output_data_1_ack_out == 1'b0) & (output_data_1_state == 2'd1)) | ((output_data_1_ack_out == 1'b0) & (output_data_1_vld_in == 1'b1) & (output_data_1_state == 2'd3)))) begin
            output_data_1_state <= 2'd1;
        end else if (((~((output_data_1_vld_in == 1'b0) & (output_data_1_ack_out == 1'b1)) & ~((output_data_1_ack_out == 1'b0) & (output_data_1_vld_in == 1'b1)) & (output_data_1_state == 2'd3)) | ((output_data_1_ack_out == 1'b1) & (output_data_1_state == 2'd1)) | ((output_data_1_vld_in == 1'b1) & (output_data_1_state == 2'd2)))) begin
            output_data_1_state <= 2'd3;
        end else begin
            output_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_last_1_sel_rd <= 1'b0;
    end else begin
        if (((output_last_1_ack_out == 1'b1) & (output_last_1_vld_out == 1'b1))) begin
            output_last_1_sel_rd <= ~output_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_last_1_sel_wr <= 1'b0;
    end else begin
        if (((output_last_1_ack_in == 1'b1) & (output_last_1_vld_in == 1'b1))) begin
            output_last_1_sel_wr <= ~output_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_last_1_state <= 2'd0;
    end else begin
        if ((((output_last_1_vld_in == 1'b0) & (output_last_1_state == 2'd2)) | ((output_last_1_vld_in == 1'b0) & (output_last_1_ack_out == 1'b1) & (output_last_1_state == 2'd3)))) begin
            output_last_1_state <= 2'd2;
        end else if ((((output_last_1_ack_out == 1'b0) & (output_last_1_state == 2'd1)) | ((output_last_1_ack_out == 1'b0) & (output_last_1_vld_in == 1'b1) & (output_last_1_state == 2'd3)))) begin
            output_last_1_state <= 2'd1;
        end else if (((~((output_last_1_vld_in == 1'b0) & (output_last_1_ack_out == 1'b1)) & ~((output_last_1_ack_out == 1'b0) & (output_last_1_vld_in == 1'b1)) & (output_last_1_state == 2'd3)) | ((output_last_1_ack_out == 1'b1) & (output_last_1_state == 2'd1)) | ((output_last_1_vld_in == 1'b1) & (output_last_1_state == 2'd2)))) begin
            output_last_1_state <= 2'd3;
        end else begin
            output_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        counter2_1_reg_801 <= tmp_124_31_reg_3222;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        counter2_1_reg_801 <= counter_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        counter_reg_767 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state87) & (exitcond4_fu_1821_p2 == 1'd1))) begin
        counter_reg_767 <= counter_2_reg_2980;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        counter_s_reg_791 <= tmp_94_s_reg_3013;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        counter_s_reg_791 <= counter_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_756 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state87) & (exitcond4_fu_1821_p2 == 1'd1))) begin
        i_1_reg_756 <= i_5_reg_2970;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_1129_p2 == 1'd1))) begin
        i_2_reg_811 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_2767_p2 == 1'd0))) begin
        i_2_reg_811 <= i_4_fu_2773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_732 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0))) begin
        i_reg_732 <= i_3_reg_2905;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv_reg_744 <= 13'd64;
    end else if (((1'b1 == ap_CS_fsm_state87) & (exitcond4_fu_1821_p2 == 1'd1))) begin
        indvars_iv_reg_744 <= indvars_iv_next_fu_1853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        norm_V_addr_loc_reg_779 <= {{p_Val2_68_14_fu_1520_p2[47:16]}};
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        norm_V_addr_loc_reg_779 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89))) begin
        reg_839 <= v_in_V_q1;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_839 <= v_in_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89))) begin
        reg_844 <= v_in_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        reg_844 <= v_in_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        OP2_V_1_cast_reg_3129 <= OP2_V_1_cast_fu_1817_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        agg_result_V_i_reg_3109 <= grp_sqrt_fixed_32_16_s_fu_822_ap_return;
        tmp_81_reg_3114 <= tmp_81_fu_1789_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        counter_2_reg_2980 <= counter_2_fu_1146_p2;
        tmp_81_cast_reg_2985 <= tmp_81_cast_fu_1156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_2901 <= exitcond1_fu_849_p2;
        exitcond1_reg_2901_pp0_iter1_reg <= exitcond1_reg_2901;
        i_reg_732_pp0_iter1_reg <= i_reg_732;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond1_reg_2901_pp0_iter2_reg <= exitcond1_reg_2901_pp0_iter1_reg;
        i_reg_732_pp0_iter2_reg <= i_reg_732_pp0_iter1_reg;
        isneg_reg_2910_pp0_iter2_reg <= isneg_reg_2910;
        tmp_31_reg_2926_pp0_iter2_reg <= tmp_31_reg_2926;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_3692 <= exitcond_fu_2767_p2;
        exitcond_reg_3692_pp1_iter1_reg <= exitcond_reg_3692;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_reg_3692_pp1_iter2_reg <= exitcond_reg_3692_pp1_iter1_reg;
        exitcond_reg_3692_pp1_iter3_reg <= exitcond_reg_3692_pp1_iter2_reg;
        exitcond_reg_3692_pp1_iter4_reg <= exitcond_reg_3692_pp1_iter3_reg;
        exitcond_reg_3692_pp1_iter5_reg <= exitcond_reg_3692_pp1_iter4_reg;
        exitcond_reg_3692_pp1_iter6_reg <= exitcond_reg_3692_pp1_iter5_reg;
        exitcond_reg_3692_pp1_iter7_reg <= exitcond_reg_3692_pp1_iter6_reg;
        exitcond_reg_3692_pp1_iter8_reg <= exitcond_reg_3692_pp1_iter7_reg;
        exitcond_reg_3692_pp1_iter9_reg <= exitcond_reg_3692_pp1_iter8_reg;
        is_neg_reg_3717_pp1_iter2_reg <= is_neg_reg_3717;
        is_neg_reg_3717_pp1_iter3_reg <= is_neg_reg_3717_pp1_iter2_reg;
        is_neg_reg_3717_pp1_iter4_reg <= is_neg_reg_3717_pp1_iter3_reg;
        is_neg_reg_3717_pp1_iter5_reg <= is_neg_reg_3717_pp1_iter4_reg;
        is_neg_reg_3717_pp1_iter6_reg <= is_neg_reg_3717_pp1_iter5_reg;
        is_neg_reg_3717_pp1_iter7_reg <= is_neg_reg_3717_pp1_iter6_reg;
        is_neg_reg_3717_pp1_iter8_reg <= is_neg_reg_3717_pp1_iter7_reg;
        last_load_reg_3728_pp1_iter2_reg <= last_load_reg_3728;
        last_load_reg_3728_pp1_iter3_reg <= last_load_reg_3728_pp1_iter2_reg;
        last_load_reg_3728_pp1_iter4_reg <= last_load_reg_3728_pp1_iter3_reg;
        last_load_reg_3728_pp1_iter5_reg <= last_load_reg_3728_pp1_iter4_reg;
        last_load_reg_3728_pp1_iter6_reg <= last_load_reg_3728_pp1_iter5_reg;
        last_load_reg_3728_pp1_iter7_reg <= last_load_reg_3728_pp1_iter6_reg;
        last_load_reg_3728_pp1_iter8_reg <= last_load_reg_3728_pp1_iter7_reg;
        tmp_111_reg_3743_pp1_iter3_reg <= tmp_111_reg_3743;
        tmp_111_reg_3743_pp1_iter4_reg <= tmp_111_reg_3743_pp1_iter3_reg;
        tmp_111_reg_3743_pp1_iter5_reg <= tmp_111_reg_3743_pp1_iter4_reg;
        tmp_111_reg_3743_pp1_iter6_reg <= tmp_111_reg_3743_pp1_iter5_reg;
        tmp_111_reg_3743_pp1_iter7_reg <= tmp_111_reg_3743_pp1_iter6_reg;
        tmp_111_reg_3743_pp1_iter8_reg <= tmp_111_reg_3743_pp1_iter7_reg;
        tmp_39_reg_3733_pp1_iter3_reg <= tmp_39_reg_3733;
        tmp_39_reg_3733_pp1_iter4_reg <= tmp_39_reg_3733_pp1_iter3_reg;
        tmp_39_reg_3733_pp1_iter5_reg <= tmp_39_reg_3733_pp1_iter4_reg;
        tmp_39_reg_3733_pp1_iter6_reg <= tmp_39_reg_3733_pp1_iter5_reg;
        tmp_39_reg_3733_pp1_iter7_reg <= tmp_39_reg_3733_pp1_iter6_reg;
        tmp_39_reg_3733_pp1_iter8_reg <= tmp_39_reg_3733_pp1_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (input_data_0_vld_out == 1'b1))) begin
        exp_tmp_V_1_reg_3059 <= {{ireg_V_1_fu_1535_p1[62:52]}};
        isneg_1_reg_3053 <= ireg_V_1_fu_1535_p1[32'd63];
        tmp_114_reg_3064 <= tmp_114_fu_1561_p1;
        tmp_47_reg_3069 <= tmp_47_fu_1565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0))) begin
        exp_tmp_V_reg_2916 <= {{ireg_V_fu_861_p1[62:52]}};
        isneg_reg_2910 <= ireg_V_fu_861_p1[32'd63];
        tmp_106_reg_2921 <= tmp_106_fu_887_p1;
        tmp_31_reg_2926 <= tmp_31_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_2905 <= i_3_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_2970 <= i_5_fu_1135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        icmp1_reg_3104 <= icmp1_fu_1650_p2;
        man_V_5_reg_3075 <= man_V_5_fu_1591_p3;
        sh_amt_1_reg_3086 <= sh_amt_1_fu_1622_p3;
        tmp_115_reg_3098 <= tmp_115_fu_1636_p1;
        tmp_52_reg_3080 <= tmp_52_fu_1604_p2;
        tmp_55_reg_3092 <= tmp_55_fu_1630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_0_load_A == 1'b1)) begin
        input_data_0_payload_A <= input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_0_load_B == 1'b1)) begin
        input_data_0_payload_B <= input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_3692 == 1'd0))) begin
        is_neg_reg_3717 <= output_temp_V_q0[32'd31];
        last_load_reg_3728 <= last_q0;
        tmp_41_reg_3723 <= tmp_41_fu_2793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_2901_pp0_iter1_reg == 1'd0))) begin
        man_V_2_reg_2932 <= man_V_2_fu_917_p3;
        sel_tmp22_reg_2960 <= sel_tmp22_fu_1011_p2;
        sel_tmp7_reg_2954 <= sel_tmp7_fu_993_p2;
        sh_amt_reg_2937 <= sh_amt_fu_948_p3;
        tmp_107_reg_2948 <= tmp_107_fu_962_p1;
        tmp_37_reg_2943 <= tmp_37_fu_956_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_1_load_A == 1'b1)) begin
        output_data_1_payload_A <= p_03_i_fu_2893_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_1_load_B == 1'b1)) begin
        output_data_1_payload_B <= p_03_i_fu_2893_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_last_1_load_A == 1'b1)) begin
        output_last_1_payload_A <= last_load_reg_3728_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((output_last_1_load_B == 1'b1)) begin
        output_last_1_payload_B <= last_load_reg_3728_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_3692 == 1'd0))) begin
        p_Val2_7_reg_3711 <= output_temp_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_reg_3692_pp1_iter1_reg == 1'd0))) begin
        tmp32_V_1_reg_3738 <= tmp32_V_1_fu_2827_p2;
        tmp_111_reg_3743 <= tmp_111_fu_2833_p1;
        tmp_39_reg_3733 <= tmp_39_fu_2799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_39_reg_3733_pp1_iter7_reg == 1'd0) & (exitcond_reg_3692_pp1_iter7_reg == 1'd0))) begin
        tmp32_V_reg_3748 <= tmp32_V_fu_2837_p1;
        tmp_42_reg_3753 <= tmp_42_fu_2851_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) & (exitcond4_fu_1821_p2 == 1'd0))) begin
        tmp_119_reg_3178 <= tmp_119_fu_1832_p1;
        tmp_121_1_reg_3212[11 : 1] <= tmp_121_1_fu_1842_p1[11 : 1];
        tmp_124_31_reg_3222 <= tmp_124_31_fu_1847_p2;
        tmp_85_reg_3168[12 : 0] <= tmp_85_fu_1827_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        tmp_121_10_reg_3362[2] <= tmp_121_10_fu_2106_p1[2];
tmp_121_10_reg_3362[11 : 4] <= tmp_121_10_fu_2106_p1[11 : 4];
        tmp_121_s_reg_3352[0] <= tmp_121_s_fu_2096_p1[0];
tmp_121_s_reg_3352[2] <= tmp_121_s_fu_2096_p1[2];
tmp_121_s_reg_3352[11 : 4] <= tmp_121_s_fu_2096_p1[11 : 4];
        tmp_123_6_reg_3342 <= {{p_Val2_75_6_fu_2057_p2[47:16]}};
        tmp_123_7_reg_3347 <= {{p_Val2_75_7_fu_2076_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        tmp_121_11_reg_3382[1 : 0] <= tmp_121_11_fu_2154_p1[1 : 0];
tmp_121_11_reg_3382[11 : 4] <= tmp_121_11_fu_2154_p1[11 : 4];
        tmp_121_12_reg_3392[1] <= tmp_121_12_fu_2164_p1[1];
tmp_121_12_reg_3392[11 : 4] <= tmp_121_12_fu_2164_p1[11 : 4];
        tmp_123_8_reg_3372 <= {{p_Val2_75_8_fu_2115_p2[47:16]}};
        tmp_123_9_reg_3377 <= {{p_Val2_75_9_fu_2134_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        tmp_121_13_reg_3412[0] <= tmp_121_13_fu_2212_p1[0];
tmp_121_13_reg_3412[11 : 4] <= tmp_121_13_fu_2212_p1[11 : 4];
        tmp_121_14_reg_3422[11 : 4] <= tmp_121_14_fu_2222_p1[11 : 4];
        tmp_123_10_reg_3407 <= {{p_Val2_75_10_fu_2192_p2[47:16]}};
        tmp_123_s_reg_3402 <= {{p_Val2_75_s_fu_2173_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        tmp_121_15_reg_3442[3 : 0] <= tmp_121_15_fu_2270_p1[3 : 0];
tmp_121_15_reg_3442[11 : 5] <= tmp_121_15_fu_2270_p1[11 : 5];
        tmp_121_16_reg_3452[3 : 1] <= tmp_121_16_fu_2280_p1[3 : 1];
tmp_121_16_reg_3452[11 : 5] <= tmp_121_16_fu_2280_p1[11 : 5];
        tmp_123_11_reg_3432 <= {{p_Val2_75_11_fu_2231_p2[47:16]}};
        tmp_123_12_reg_3437 <= {{p_Val2_75_12_fu_2250_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        tmp_121_17_reg_3472[0] <= tmp_121_17_fu_2328_p1[0];
tmp_121_17_reg_3472[3 : 2] <= tmp_121_17_fu_2328_p1[3 : 2];
tmp_121_17_reg_3472[11 : 5] <= tmp_121_17_fu_2328_p1[11 : 5];
        tmp_121_18_reg_3482[3 : 2] <= tmp_121_18_fu_2338_p1[3 : 2];
tmp_121_18_reg_3482[11 : 5] <= tmp_121_18_fu_2338_p1[11 : 5];
        tmp_123_13_reg_3462 <= {{p_Val2_75_13_fu_2289_p2[47:16]}};
        tmp_123_14_reg_3467 <= {{p_Val2_75_14_fu_2308_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        tmp_121_19_reg_3502[1 : 0] <= tmp_121_19_fu_2386_p1[1 : 0];
tmp_121_19_reg_3502[3] <= tmp_121_19_fu_2386_p1[3];
tmp_121_19_reg_3502[11 : 5] <= tmp_121_19_fu_2386_p1[11 : 5];
        tmp_121_20_reg_3512[1] <= tmp_121_20_fu_2396_p1[1];
tmp_121_20_reg_3512[3] <= tmp_121_20_fu_2396_p1[3];
tmp_121_20_reg_3512[11 : 5] <= tmp_121_20_fu_2396_p1[11 : 5];
        tmp_123_15_reg_3492 <= {{p_Val2_75_15_fu_2347_p2[47:16]}};
        tmp_123_16_reg_3497 <= {{p_Val2_75_16_fu_2366_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        tmp_121_21_reg_3532[0] <= tmp_121_21_fu_2444_p1[0];
tmp_121_21_reg_3532[3] <= tmp_121_21_fu_2444_p1[3];
tmp_121_21_reg_3532[11 : 5] <= tmp_121_21_fu_2444_p1[11 : 5];
        tmp_121_22_reg_3542[3] <= tmp_121_22_fu_2454_p1[3];
tmp_121_22_reg_3542[11 : 5] <= tmp_121_22_fu_2454_p1[11 : 5];
        tmp_123_17_reg_3522 <= {{p_Val2_75_17_fu_2405_p2[47:16]}};
        tmp_123_18_reg_3527 <= {{p_Val2_75_18_fu_2424_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        tmp_121_23_reg_3562[2 : 0] <= tmp_121_23_fu_2502_p1[2 : 0];
tmp_121_23_reg_3562[11 : 5] <= tmp_121_23_fu_2502_p1[11 : 5];
        tmp_121_24_reg_3572[2 : 1] <= tmp_121_24_fu_2512_p1[2 : 1];
tmp_121_24_reg_3572[11 : 5] <= tmp_121_24_fu_2512_p1[11 : 5];
        tmp_123_19_reg_3552 <= {{p_Val2_75_19_fu_2463_p2[47:16]}};
        tmp_123_20_reg_3557 <= {{p_Val2_75_20_fu_2482_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        tmp_121_25_reg_3592[0] <= tmp_121_25_fu_2560_p1[0];
tmp_121_25_reg_3592[2] <= tmp_121_25_fu_2560_p1[2];
tmp_121_25_reg_3592[11 : 5] <= tmp_121_25_fu_2560_p1[11 : 5];
        tmp_121_26_reg_3602[2] <= tmp_121_26_fu_2570_p1[2];
tmp_121_26_reg_3602[11 : 5] <= tmp_121_26_fu_2570_p1[11 : 5];
        tmp_123_21_reg_3582 <= {{p_Val2_75_21_fu_2521_p2[47:16]}};
        tmp_123_22_reg_3587 <= {{p_Val2_75_22_fu_2540_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_121_27_reg_3622[1 : 0] <= tmp_121_27_fu_2618_p1[1 : 0];
tmp_121_27_reg_3622[11 : 5] <= tmp_121_27_fu_2618_p1[11 : 5];
        tmp_121_28_reg_3632[1] <= tmp_121_28_fu_2628_p1[1];
tmp_121_28_reg_3632[11 : 5] <= tmp_121_28_fu_2628_p1[11 : 5];
        tmp_123_23_reg_3612 <= {{p_Val2_75_23_fu_2579_p2[47:16]}};
        tmp_123_24_reg_3617 <= {{p_Val2_75_24_fu_2598_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        tmp_121_29_reg_3652[0] <= tmp_121_29_fu_2676_p1[0];
tmp_121_29_reg_3652[11 : 5] <= tmp_121_29_fu_2676_p1[11 : 5];
        tmp_121_30_reg_3662[11 : 5] <= tmp_121_30_fu_2686_p1[11 : 5];
        tmp_123_25_reg_3642 <= {{p_Val2_75_25_fu_2637_p2[47:16]}};
        tmp_123_26_reg_3647 <= {{p_Val2_75_26_fu_2656_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        tmp_121_2_reg_3232[0] <= tmp_121_2_fu_1864_p1[0];
tmp_121_2_reg_3232[11 : 2] <= tmp_121_2_fu_1864_p1[11 : 2];
        tmp_121_3_reg_3242[11 : 2] <= tmp_121_3_fu_1874_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_121_4_reg_3262[1 : 0] <= tmp_121_4_fu_1922_p1[1 : 0];
tmp_121_4_reg_3262[11 : 3] <= tmp_121_4_fu_1922_p1[11 : 3];
        tmp_121_5_reg_3272[1] <= tmp_121_5_fu_1932_p1[1];
tmp_121_5_reg_3272[11 : 3] <= tmp_121_5_fu_1932_p1[11 : 3];
        tmp_123_1_reg_3257 <= {{p_Val2_75_1_fu_1902_p2[47:16]}};
        tmp_87_reg_3252 <= {{p_Val2_5_fu_1883_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_121_6_reg_3292[0] <= tmp_121_6_fu_1980_p1[0];
tmp_121_6_reg_3292[11 : 3] <= tmp_121_6_fu_1980_p1[11 : 3];
        tmp_121_7_reg_3302[11 : 3] <= tmp_121_7_fu_1990_p1[11 : 3];
        tmp_123_2_reg_3282 <= {{p_Val2_75_2_fu_1941_p2[47:16]}};
        tmp_123_3_reg_3287 <= {{p_Val2_75_3_fu_1960_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_121_8_reg_3322[2 : 0] <= tmp_121_8_fu_2038_p1[2 : 0];
tmp_121_8_reg_3322[11 : 4] <= tmp_121_8_fu_2038_p1[11 : 4];
        tmp_121_9_reg_3332[2 : 1] <= tmp_121_9_fu_2048_p1[2 : 1];
tmp_121_9_reg_3332[11 : 4] <= tmp_121_9_fu_2048_p1[11 : 4];
        tmp_123_4_reg_3312 <= {{p_Val2_75_4_fu_1999_p2[47:16]}};
        tmp_123_5_reg_3317 <= {{p_Val2_75_5_fu_2018_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        tmp_123_27_reg_3672 <= {{p_Val2_75_27_fu_2695_p2[47:16]}};
        tmp_123_28_reg_3677 <= {{p_Val2_75_28_fu_2714_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        tmp_123_29_reg_3682 <= {{p_Val2_75_29_fu_2733_p2[47:16]}};
        tmp_123_30_reg_3687 <= {{p_Val2_75_30_fu_2752_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond3_fu_1162_p2 == 1'd0))) begin
        tmp_84_reg_3008 <= {{p_Val2_68_1_fu_1199_p2[47:16]}};
        tmp_94_s_reg_3013 <= tmp_94_s_fu_1214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_88_reg_3018 <= {{p_Val2_68_3_fu_1250_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_90_reg_3023 <= {{p_Val2_68_5_fu_1295_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_92_reg_3028 <= {{p_Val2_68_7_fu_1340_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_94_reg_3033 <= {{p_Val2_68_9_fu_1385_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_96_reg_3038 <= {{p_Val2_68_10_fu_1430_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_98_reg_3043 <= {{p_Val2_68_12_fu_1475_p2[47:16]}};
    end
end

always @ (*) begin
    if ((exitcond1_fu_849_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_2767_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state106 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state106 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_736_p4 = i_3_reg_2905;
    end else begin
        ap_phi_mux_i_phi_fu_736_p4 = i_reg_732;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_1807_ap_start = 1'b1;
    end else begin
        grp_fu_1807_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_828_ce = 1'b1;
    end else begin
        grp_fu_828_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (input_data_0_vld_out == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0)))) begin
        input_data_0_ack_out = 1'b1;
    end else begin
        input_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_0_sel == 1'b1)) begin
        input_data_0_data_out = input_data_0_payload_B;
    end else begin
        input_data_0_data_out = input_data_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (input_data_0_vld_out == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0)))) begin
        input_last_0_ack_out = 1'b1;
    end else begin
        input_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_2901 == 1'd0)))) begin
        input_r_TDATA_blk_n = input_data_0_state[1'd0];
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        last_ce0 = 1'b1;
    end else begin
        last_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_1_sel == 1'b1)) begin
        output_data_1_data_out = output_data_1_payload_B;
    end else begin
        output_data_1_data_out = output_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1) & (exitcond_reg_3692_pp1_iter8_reg == 1'd0))) begin
        output_data_1_vld_in = 1'b1;
    end else begin
        output_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_last_1_sel == 1'b1)) begin
        output_last_1_data_out = output_last_1_payload_B;
    end else begin
        output_last_1_data_out = output_last_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1) & (exitcond_reg_3692_pp1_iter8_reg == 1'd0))) begin
        output_last_1_vld_in = 1'b1;
    end else begin
        output_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (exitcond_reg_3692_pp1_iter9_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1) & (exitcond_reg_3692_pp1_iter8_reg == 1'd0)))) begin
        output_r_TDATA_blk_n = output_data_1_state[1'd1];
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_temp_V_address0 = tmp_38_fu_2779_p1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        output_temp_V_address0 = tmp_121_29_reg_3652;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output_temp_V_address0 = tmp_121_27_reg_3622;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output_temp_V_address0 = tmp_121_25_reg_3592;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        output_temp_V_address0 = tmp_121_23_reg_3562;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        output_temp_V_address0 = tmp_121_21_reg_3532;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        output_temp_V_address0 = tmp_121_19_reg_3502;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        output_temp_V_address0 = tmp_121_17_reg_3472;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        output_temp_V_address0 = tmp_121_15_reg_3442;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        output_temp_V_address0 = tmp_121_13_reg_3412;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        output_temp_V_address0 = tmp_121_11_reg_3382;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        output_temp_V_address0 = tmp_121_s_reg_3352;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_temp_V_address0 = tmp_121_8_reg_3322;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_temp_V_address0 = tmp_121_6_reg_3292;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        output_temp_V_address0 = tmp_121_4_reg_3262;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        output_temp_V_address0 = tmp_121_2_reg_3232;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        output_temp_V_address0 = tmp_85_reg_3168;
    end else begin
        output_temp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        output_temp_V_address1 = tmp_121_30_reg_3662;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output_temp_V_address1 = tmp_121_28_reg_3632;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output_temp_V_address1 = tmp_121_26_reg_3602;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        output_temp_V_address1 = tmp_121_24_reg_3572;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        output_temp_V_address1 = tmp_121_22_reg_3542;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        output_temp_V_address1 = tmp_121_20_reg_3512;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        output_temp_V_address1 = tmp_121_18_reg_3482;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        output_temp_V_address1 = tmp_121_16_reg_3452;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        output_temp_V_address1 = tmp_121_14_reg_3422;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        output_temp_V_address1 = tmp_121_12_reg_3392;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        output_temp_V_address1 = tmp_121_10_reg_3362;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_temp_V_address1 = tmp_121_9_reg_3332;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_temp_V_address1 = tmp_121_7_reg_3302;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        output_temp_V_address1 = tmp_121_5_reg_3272;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        output_temp_V_address1 = tmp_121_3_reg_3242;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        output_temp_V_address1 = tmp_121_1_reg_3212;
    end else begin
        output_temp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state105) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        output_temp_V_ce0 = 1'b1;
    end else begin
        output_temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state105))) begin
        output_temp_V_ce1 = 1'b1;
    end else begin
        output_temp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        output_temp_V_d0 = tmp_123_29_reg_3682;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output_temp_V_d0 = tmp_123_27_reg_3672;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output_temp_V_d0 = tmp_123_25_reg_3642;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        output_temp_V_d0 = tmp_123_23_reg_3612;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        output_temp_V_d0 = tmp_123_21_reg_3582;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        output_temp_V_d0 = tmp_123_19_reg_3552;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        output_temp_V_d0 = tmp_123_17_reg_3522;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        output_temp_V_d0 = tmp_123_15_reg_3492;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        output_temp_V_d0 = tmp_123_13_reg_3462;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        output_temp_V_d0 = tmp_123_11_reg_3432;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        output_temp_V_d0 = tmp_123_s_reg_3402;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_temp_V_d0 = tmp_123_8_reg_3372;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_temp_V_d0 = tmp_123_6_reg_3342;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        output_temp_V_d0 = tmp_123_4_reg_3312;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        output_temp_V_d0 = tmp_123_2_reg_3282;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        output_temp_V_d0 = tmp_87_reg_3252;
    end else begin
        output_temp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        output_temp_V_d1 = tmp_123_30_reg_3687;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        output_temp_V_d1 = tmp_123_28_reg_3677;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        output_temp_V_d1 = tmp_123_26_reg_3647;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        output_temp_V_d1 = tmp_123_24_reg_3617;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        output_temp_V_d1 = tmp_123_22_reg_3587;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        output_temp_V_d1 = tmp_123_20_reg_3557;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        output_temp_V_d1 = tmp_123_18_reg_3527;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        output_temp_V_d1 = tmp_123_16_reg_3497;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        output_temp_V_d1 = tmp_123_14_reg_3467;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        output_temp_V_d1 = tmp_123_12_reg_3437;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        output_temp_V_d1 = tmp_123_10_reg_3407;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_temp_V_d1 = tmp_123_9_reg_3377;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        output_temp_V_d1 = tmp_123_7_reg_3347;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        output_temp_V_d1 = tmp_123_5_reg_3317;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        output_temp_V_d1 = tmp_123_3_reg_3287;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        output_temp_V_d1 = tmp_123_1_reg_3257;
    end else begin
        output_temp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state105))) begin
        output_temp_V_we0 = 1'b1;
    end else begin
        output_temp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state105))) begin
        output_temp_V_we1 = 1'b1;
    end else begin
        output_temp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        v_in_V_address0 = tmp_121_30_fu_2686_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        v_in_V_address0 = tmp_121_28_fu_2628_p1;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        v_in_V_address0 = tmp_121_26_fu_2570_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        v_in_V_address0 = tmp_121_24_fu_2512_p1;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        v_in_V_address0 = tmp_121_22_fu_2454_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        v_in_V_address0 = tmp_121_20_fu_2396_p1;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        v_in_V_address0 = tmp_121_18_fu_2338_p1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        v_in_V_address0 = tmp_121_16_fu_2280_p1;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        v_in_V_address0 = tmp_121_14_fu_2222_p1;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        v_in_V_address0 = tmp_121_12_fu_2164_p1;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        v_in_V_address0 = tmp_121_10_fu_2106_p1;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        v_in_V_address0 = tmp_121_9_fu_2048_p1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        v_in_V_address0 = tmp_121_7_fu_1990_p1;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        v_in_V_address0 = tmp_121_5_fu_1932_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        v_in_V_address0 = tmp_121_3_fu_1874_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        v_in_V_address0 = tmp_85_fu_1827_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        v_in_V_address0 = tmp_32_fu_1141_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v_in_V_address0 = tmp_fu_1017_p1;
    end else begin
        v_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        v_in_V_address1 = tmp_121_29_fu_2676_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        v_in_V_address1 = tmp_121_27_fu_2618_p1;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        v_in_V_address1 = tmp_121_25_fu_2560_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        v_in_V_address1 = tmp_121_23_fu_2502_p1;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        v_in_V_address1 = tmp_121_21_fu_2444_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        v_in_V_address1 = tmp_121_19_fu_2386_p1;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        v_in_V_address1 = tmp_121_17_fu_2328_p1;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        v_in_V_address1 = tmp_121_15_fu_2270_p1;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        v_in_V_address1 = tmp_121_13_fu_2212_p1;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        v_in_V_address1 = tmp_121_11_fu_2154_p1;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        v_in_V_address1 = tmp_121_s_fu_2096_p1;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        v_in_V_address1 = tmp_121_8_fu_2038_p1;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        v_in_V_address1 = tmp_121_6_fu_1980_p1;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        v_in_V_address1 = tmp_121_4_fu_1922_p1;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        v_in_V_address1 = tmp_121_2_fu_1864_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        v_in_V_address1 = tmp_121_1_fu_1842_p1;
    end else begin
        v_in_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        v_in_V_ce0 = 1'b1;
    end else begin
        v_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88))) begin
        v_in_V_ce1 = 1'b1;
    end else begin
        v_in_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (exitcond1_reg_2901_pp0_iter2_reg == 1'd0))) begin
        v_in_V_we0 = 1'b1;
    end else begin
        v_in_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_849_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_849_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_1129_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond3_fu_1162_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (input_data_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((1'b1 == ap_CS_fsm_state87) & (exitcond4_fu_1821_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_2767_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_2767_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state117 : begin
            if ((~((output_last_1_ack_in == 1'b0) | (output_data_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_1_fu_1598_p2 = (12'd1075 - tmp_45_fu_1571_p1);

assign F2_fu_924_p2 = (12'd1075 - tmp_s_fu_897_p1);

assign OP2_V_1_cast_fu_1817_p1 = $signed(tmp_118_fu_1813_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd95];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((input_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_reg_2901 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((input_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_reg_2901 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter10 == 1'b1) & (1'b1 == ap_block_state116_io)) | ((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_block_state115_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter10 == 1'b1) & (1'b1 == ap_block_state116_io)) | ((ap_enable_reg_pp1_iter9 == 1'b1) & (1'b1 == ap_block_state115_io)));
end

assign ap_block_state106_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_io = ((output_data_1_ack_in == 1'b0) & (exitcond_reg_3692_pp1_iter8_reg == 1'd0));
end

assign ap_block_state115_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state116_io = ((output_data_1_ack_in == 1'b0) & (exitcond_reg_3692_pp1_iter9_reg == 1'd0));
end

assign ap_block_state116_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state117 = ((output_last_1_ack_in == 1'b0) | (output_data_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((input_data_0_vld_out == 1'b0) & (exitcond1_reg_2901 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign counter_2_fu_1146_p2 = (counter_reg_767 + 13'd64);

assign exitcond1_fu_849_p2 = ((ap_phi_mux_i_phi_fu_736_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond2_fu_1129_p2 = ((i_1_reg_756 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_1162_p2 = ((counter_s_reg_791 == indvars_iv_reg_744) ? 1'b1 : 1'b0);

assign exitcond4_fu_1821_p2 = ((counter2_1_reg_801 == indvars_iv_reg_744) ? 1'b1 : 1'b0);

assign exitcond_fu_2767_p2 = ((i_2_reg_811 == 13'd4096) ? 1'b1 : 1'b0);

assign f_fu_2889_p1 = p_Result_3_fu_2878_p5;

assign grp_fu_1807_p0 = {{tmp_81_reg_3114}, {16'd0}};

assign grp_fu_1807_p1 = grp_fu_1807_p10;

assign grp_fu_1807_p10 = agg_result_V_i_reg_3109;

assign i_3_fu_855_p2 = (ap_phi_mux_i_phi_fu_736_p4 + 13'd1);

assign i_4_fu_2773_p2 = (i_2_reg_811 + 13'd1);

assign i_5_fu_1135_p2 = (i_1_reg_756 + 7'd1);

assign icmp1_fu_1650_p2 = ((tmp_116_fu_1640_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_fu_976_p2 = ((tmp_108_fu_966_p4 == 7'd0) ? 1'b1 : 1'b0);

assign indvars_iv_next_fu_1853_p2 = (indvars_iv_reg_744 + 13'd64);

assign input_data_0_ack_in = input_data_0_state[1'd1];

assign input_data_0_load_A = (input_data_0_state_cmp_full & ~input_data_0_sel_wr);

assign input_data_0_load_B = (input_data_0_state_cmp_full & input_data_0_sel_wr);

assign input_data_0_sel = input_data_0_sel_rd;

assign input_data_0_state_cmp_full = ((input_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_0_vld_in = input_r_TVALID;

assign input_data_0_vld_out = input_data_0_state[1'd0];

assign input_last_0_vld_in = input_r_TVALID;

assign input_r_TREADY = input_last_0_state[1'd1];

assign ireg_V_1_fu_1535_p1 = grp_fu_831_p1;

assign ireg_V_fu_861_p1 = grp_fu_831_p1;

assign last_address0 = tmp_38_fu_2779_p1;

assign man_V_1_fu_911_p2 = (54'd0 - p_Result_s_fu_907_p1);

assign man_V_2_fu_917_p3 = ((isneg_reg_2910[0:0] === 1'b1) ? man_V_1_fu_911_p2 : p_Result_s_fu_907_p1);

assign man_V_4_fu_1585_p2 = (54'd0 - p_Result_1_fu_1581_p1);

assign man_V_5_fu_1591_p3 = ((isneg_1_reg_3053[0:0] === 1'b1) ? man_V_4_fu_1585_p2 : p_Result_1_fu_1581_p1);

assign newSel1_fu_1093_p3 = ((sel_tmp9_fu_1071_p2[0:0] === 1'b1) ? storemerge_fu_1043_p3 : tmp_107_reg_2948);

assign newSel2_fu_1106_p3 = ((or_cond_fu_1088_p2[0:0] === 1'b1) ? newSel_fu_1081_p3 : newSel1_fu_1093_p3);

assign newSel_fu_1081_p3 = ((sel_tmp22_reg_2960[0:0] === 1'b1) ? tmp_59_fu_1050_p2 : tmp_109_fu_1039_p1);


always @ (p_Result_2_fu_2809_p4) begin
    if (p_Result_2_fu_2809_p4[0] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd0;
    end else if (p_Result_2_fu_2809_p4[1] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd1;
    end else if (p_Result_2_fu_2809_p4[2] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd2;
    end else if (p_Result_2_fu_2809_p4[3] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd3;
    end else if (p_Result_2_fu_2809_p4[4] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd4;
    end else if (p_Result_2_fu_2809_p4[5] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd5;
    end else if (p_Result_2_fu_2809_p4[6] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd6;
    end else if (p_Result_2_fu_2809_p4[7] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd7;
    end else if (p_Result_2_fu_2809_p4[8] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd8;
    end else if (p_Result_2_fu_2809_p4[9] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd9;
    end else if (p_Result_2_fu_2809_p4[10] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd10;
    end else if (p_Result_2_fu_2809_p4[11] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd11;
    end else if (p_Result_2_fu_2809_p4[12] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd12;
    end else if (p_Result_2_fu_2809_p4[13] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd13;
    end else if (p_Result_2_fu_2809_p4[14] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd14;
    end else if (p_Result_2_fu_2809_p4[15] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd15;
    end else if (p_Result_2_fu_2809_p4[16] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd16;
    end else if (p_Result_2_fu_2809_p4[17] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd17;
    end else if (p_Result_2_fu_2809_p4[18] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd18;
    end else if (p_Result_2_fu_2809_p4[19] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd19;
    end else if (p_Result_2_fu_2809_p4[20] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd20;
    end else if (p_Result_2_fu_2809_p4[21] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd21;
    end else if (p_Result_2_fu_2809_p4[22] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd22;
    end else if (p_Result_2_fu_2809_p4[23] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd23;
    end else if (p_Result_2_fu_2809_p4[24] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd24;
    end else if (p_Result_2_fu_2809_p4[25] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd25;
    end else if (p_Result_2_fu_2809_p4[26] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd26;
    end else if (p_Result_2_fu_2809_p4[27] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd27;
    end else if (p_Result_2_fu_2809_p4[28] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd28;
    end else if (p_Result_2_fu_2809_p4[29] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd29;
    end else if (p_Result_2_fu_2809_p4[30] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd30;
    end else if (p_Result_2_fu_2809_p4[31] == 1'b1) begin
        num_zeros_fu_2819_p3 = 32'd31;
    end else begin
        num_zeros_fu_2819_p3 = 32'd32;
    end
end

assign or_cond1_fu_1100_p2 = (sel_tmp9_fu_1071_p2 | sel_tmp2_fu_1060_p2);

assign or_cond2_fu_1114_p2 = (or_cond_fu_1088_p2 | or_cond1_fu_1100_p2);

assign or_cond3_fu_1737_p2 = (sel_tmp47_fu_1732_p2 | sel_tmp40_fu_1715_p2);

assign or_cond4_fu_1743_p2 = (sel_tmp34_fu_1709_p2 | sel_tmp27_fu_1683_p2);

assign or_cond5_fu_1749_p2 = (or_cond4_fu_1743_p2 | or_cond3_fu_1737_p2);

assign or_cond_fu_1088_p2 = (sel_tmp22_reg_2960 | sel_tmp15_fu_1076_p2);

assign output_data_1_ack_in = output_data_1_state[1'd1];

assign output_data_1_ack_out = output_r_TREADY;

assign output_data_1_load_A = (output_data_1_state_cmp_full & ~output_data_1_sel_wr);

assign output_data_1_load_B = (output_data_1_state_cmp_full & output_data_1_sel_wr);

assign output_data_1_sel = output_data_1_sel_rd;

assign output_data_1_state_cmp_full = ((output_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_1_vld_out = output_data_1_state[1'd0];

assign output_last_1_ack_in = output_last_1_state[1'd1];

assign output_last_1_ack_out = output_r_TREADY;

assign output_last_1_load_A = (output_last_1_state_cmp_full & ~output_last_1_sel_wr);

assign output_last_1_load_B = (output_last_1_state_cmp_full & output_last_1_sel_wr);

assign output_last_1_sel = output_last_1_sel_rd;

assign output_last_1_state_cmp_full = ((output_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_last_1_vld_out = output_last_1_state[1'd0];

assign output_r_TDATA = output_data_1_data_out;

assign output_r_TLAST = output_last_1_data_out;

assign output_r_TVALID = output_last_1_state[1'd0];

assign p_03_i_fu_2893_p3 = ((tmp_39_reg_3733_pp1_iter8_reg[0:0] === 1'b1) ? 32'd0 : f_fu_2889_p1);

assign p_Repl2_12_trunc_fu_2865_p2 = (tmp_69_fu_2857_p2 + tmp_70_fu_2862_p1);

assign p_Result_1_fu_1581_p1 = tmp_72_fu_1574_p3;

integer ap_tvar_int_0;

always @ (p_Val2_s_54_fu_2804_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_2_fu_2809_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_2_fu_2809_p4[ap_tvar_int_0] = p_Val2_s_54_fu_2804_p3[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_3_fu_2878_p5 = {{tmp_71_fu_2871_p3}, {tmp32_V_reg_3748[22:0]}};

assign p_Result_4_fu_2841_p4 = {{tmp32_V_fu_2837_p1[30:23]}};

assign p_Result_s_fu_907_p1 = tmp_66_fu_900_p3;

assign p_Val2_5_fu_1883_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_5_fu_1883_p1 = reg_839;

assign p_Val2_5_fu_1883_p2 = ($signed(p_Val2_5_fu_1883_p0) * $signed(p_Val2_5_fu_1883_p1));

assign p_Val2_68_10_fu_1430_p2 = (tmp_90_10_fu_1422_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_11_fu_1452_p2 = (tmp_90_11_fu_1445_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_12_fu_1475_p2 = (tmp_90_12_fu_1467_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_13_fu_1497_p2 = (tmp_90_13_fu_1490_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_14_fu_1520_p2 = (tmp_90_14_fu_1512_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_1_fu_1199_p2 = (tmp_90_1_fu_1191_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_2_fu_1227_p2 = (tmp_90_2_fu_1220_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_3_fu_1250_p2 = (tmp_90_3_fu_1242_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_4_fu_1272_p2 = (tmp_90_4_fu_1265_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_5_fu_1295_p2 = (tmp_90_5_fu_1287_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_6_fu_1317_p2 = (tmp_90_6_fu_1310_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_7_fu_1340_p2 = (tmp_90_7_fu_1332_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_8_fu_1362_p2 = (tmp_90_8_fu_1355_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_9_fu_1385_p2 = (tmp_90_9_fu_1377_p3 + tmp_81_cast_reg_2985);

assign p_Val2_68_s_fu_1407_p2 = (tmp_90_s_fu_1400_p3 + tmp_81_cast_reg_2985);

assign p_Val2_75_10_fu_2192_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_10_fu_2192_p1 = reg_844;

assign p_Val2_75_10_fu_2192_p2 = ($signed(p_Val2_75_10_fu_2192_p0) * $signed(p_Val2_75_10_fu_2192_p1));

assign p_Val2_75_11_fu_2231_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_11_fu_2231_p1 = reg_839;

assign p_Val2_75_11_fu_2231_p2 = ($signed(p_Val2_75_11_fu_2231_p0) * $signed(p_Val2_75_11_fu_2231_p1));

assign p_Val2_75_12_fu_2250_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_12_fu_2250_p1 = reg_844;

assign p_Val2_75_12_fu_2250_p2 = ($signed(p_Val2_75_12_fu_2250_p0) * $signed(p_Val2_75_12_fu_2250_p1));

assign p_Val2_75_13_fu_2289_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_13_fu_2289_p1 = reg_839;

assign p_Val2_75_13_fu_2289_p2 = ($signed(p_Val2_75_13_fu_2289_p0) * $signed(p_Val2_75_13_fu_2289_p1));

assign p_Val2_75_14_fu_2308_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_14_fu_2308_p1 = reg_844;

assign p_Val2_75_14_fu_2308_p2 = ($signed(p_Val2_75_14_fu_2308_p0) * $signed(p_Val2_75_14_fu_2308_p1));

assign p_Val2_75_15_fu_2347_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_15_fu_2347_p1 = reg_839;

assign p_Val2_75_15_fu_2347_p2 = ($signed(p_Val2_75_15_fu_2347_p0) * $signed(p_Val2_75_15_fu_2347_p1));

assign p_Val2_75_16_fu_2366_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_16_fu_2366_p1 = reg_844;

assign p_Val2_75_16_fu_2366_p2 = ($signed(p_Val2_75_16_fu_2366_p0) * $signed(p_Val2_75_16_fu_2366_p1));

assign p_Val2_75_17_fu_2405_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_17_fu_2405_p1 = reg_839;

assign p_Val2_75_17_fu_2405_p2 = ($signed(p_Val2_75_17_fu_2405_p0) * $signed(p_Val2_75_17_fu_2405_p1));

assign p_Val2_75_18_fu_2424_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_18_fu_2424_p1 = reg_844;

assign p_Val2_75_18_fu_2424_p2 = ($signed(p_Val2_75_18_fu_2424_p0) * $signed(p_Val2_75_18_fu_2424_p1));

assign p_Val2_75_19_fu_2463_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_19_fu_2463_p1 = reg_839;

assign p_Val2_75_19_fu_2463_p2 = ($signed(p_Val2_75_19_fu_2463_p0) * $signed(p_Val2_75_19_fu_2463_p1));

assign p_Val2_75_1_fu_1902_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_1_fu_1902_p1 = reg_844;

assign p_Val2_75_1_fu_1902_p2 = ($signed(p_Val2_75_1_fu_1902_p0) * $signed(p_Val2_75_1_fu_1902_p1));

assign p_Val2_75_20_fu_2482_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_20_fu_2482_p1 = reg_844;

assign p_Val2_75_20_fu_2482_p2 = ($signed(p_Val2_75_20_fu_2482_p0) * $signed(p_Val2_75_20_fu_2482_p1));

assign p_Val2_75_21_fu_2521_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_21_fu_2521_p1 = reg_839;

assign p_Val2_75_21_fu_2521_p2 = ($signed(p_Val2_75_21_fu_2521_p0) * $signed(p_Val2_75_21_fu_2521_p1));

assign p_Val2_75_22_fu_2540_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_22_fu_2540_p1 = reg_844;

assign p_Val2_75_22_fu_2540_p2 = ($signed(p_Val2_75_22_fu_2540_p0) * $signed(p_Val2_75_22_fu_2540_p1));

assign p_Val2_75_23_fu_2579_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_23_fu_2579_p1 = reg_839;

assign p_Val2_75_23_fu_2579_p2 = ($signed(p_Val2_75_23_fu_2579_p0) * $signed(p_Val2_75_23_fu_2579_p1));

assign p_Val2_75_24_fu_2598_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_24_fu_2598_p1 = reg_844;

assign p_Val2_75_24_fu_2598_p2 = ($signed(p_Val2_75_24_fu_2598_p0) * $signed(p_Val2_75_24_fu_2598_p1));

assign p_Val2_75_25_fu_2637_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_25_fu_2637_p1 = reg_839;

assign p_Val2_75_25_fu_2637_p2 = ($signed(p_Val2_75_25_fu_2637_p0) * $signed(p_Val2_75_25_fu_2637_p1));

assign p_Val2_75_26_fu_2656_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_26_fu_2656_p1 = reg_844;

assign p_Val2_75_26_fu_2656_p2 = ($signed(p_Val2_75_26_fu_2656_p0) * $signed(p_Val2_75_26_fu_2656_p1));

assign p_Val2_75_27_fu_2695_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_27_fu_2695_p1 = reg_839;

assign p_Val2_75_27_fu_2695_p2 = ($signed(p_Val2_75_27_fu_2695_p0) * $signed(p_Val2_75_27_fu_2695_p1));

assign p_Val2_75_28_fu_2714_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_28_fu_2714_p1 = reg_844;

assign p_Val2_75_28_fu_2714_p2 = ($signed(p_Val2_75_28_fu_2714_p0) * $signed(p_Val2_75_28_fu_2714_p1));

assign p_Val2_75_29_fu_2733_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_29_fu_2733_p1 = reg_839;

assign p_Val2_75_29_fu_2733_p2 = ($signed(p_Val2_75_29_fu_2733_p0) * $signed(p_Val2_75_29_fu_2733_p1));

assign p_Val2_75_2_fu_1941_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_2_fu_1941_p1 = reg_839;

assign p_Val2_75_2_fu_1941_p2 = ($signed(p_Val2_75_2_fu_1941_p0) * $signed(p_Val2_75_2_fu_1941_p1));

assign p_Val2_75_30_fu_2752_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_30_fu_2752_p1 = reg_844;

assign p_Val2_75_30_fu_2752_p2 = ($signed(p_Val2_75_30_fu_2752_p0) * $signed(p_Val2_75_30_fu_2752_p1));

assign p_Val2_75_3_fu_1960_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_3_fu_1960_p1 = reg_844;

assign p_Val2_75_3_fu_1960_p2 = ($signed(p_Val2_75_3_fu_1960_p0) * $signed(p_Val2_75_3_fu_1960_p1));

assign p_Val2_75_4_fu_1999_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_4_fu_1999_p1 = reg_839;

assign p_Val2_75_4_fu_1999_p2 = ($signed(p_Val2_75_4_fu_1999_p0) * $signed(p_Val2_75_4_fu_1999_p1));

assign p_Val2_75_5_fu_2018_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_5_fu_2018_p1 = reg_844;

assign p_Val2_75_5_fu_2018_p2 = ($signed(p_Val2_75_5_fu_2018_p0) * $signed(p_Val2_75_5_fu_2018_p1));

assign p_Val2_75_6_fu_2057_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_6_fu_2057_p1 = reg_839;

assign p_Val2_75_6_fu_2057_p2 = ($signed(p_Val2_75_6_fu_2057_p0) * $signed(p_Val2_75_6_fu_2057_p1));

assign p_Val2_75_7_fu_2076_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_7_fu_2076_p1 = reg_844;

assign p_Val2_75_7_fu_2076_p2 = ($signed(p_Val2_75_7_fu_2076_p0) * $signed(p_Val2_75_7_fu_2076_p1));

assign p_Val2_75_8_fu_2115_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_8_fu_2115_p1 = reg_839;

assign p_Val2_75_8_fu_2115_p2 = ($signed(p_Val2_75_8_fu_2115_p0) * $signed(p_Val2_75_8_fu_2115_p1));

assign p_Val2_75_9_fu_2134_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_9_fu_2134_p1 = reg_844;

assign p_Val2_75_9_fu_2134_p2 = ($signed(p_Val2_75_9_fu_2134_p0) * $signed(p_Val2_75_9_fu_2134_p1));

assign p_Val2_75_s_fu_2173_p0 = OP2_V_1_cast_reg_3129;

assign p_Val2_75_s_fu_2173_p1 = reg_839;

assign p_Val2_75_s_fu_2173_p2 = ($signed(p_Val2_75_s_fu_2173_p0) * $signed(p_Val2_75_s_fu_2173_p1));

assign p_Val2_s_54_fu_2804_p3 = ((is_neg_reg_3717[0:0] === 1'b1) ? tmp_41_reg_3723 : p_Val2_7_reg_3711);

assign p_Val2_s_fu_1176_p2 = (tmp_82_fu_1168_p3 + tmp_81_cast_reg_2985);

assign sel_tmp15_fu_1076_p2 = (tmp_48_fu_1025_p2 & sel_tmp7_reg_2954);

assign sel_tmp1_fu_1055_p2 = (tmp_31_reg_2926_pp0_iter2_reg ^ 1'd1);

assign sel_tmp21_demorgan_fu_999_p2 = (tmp_34_fu_930_p2 | sel_tmp6_demorgan_fu_982_p2);

assign sel_tmp21_fu_1005_p2 = (sel_tmp21_demorgan_fu_999_p2 ^ 1'd1);

assign sel_tmp22_fu_1011_p2 = (sel_tmp21_fu_1005_p2 & icmp_fu_976_p2);

assign sel_tmp26_fu_1678_p2 = (tmp_47_reg_3069 ^ 1'd1);

assign sel_tmp27_fu_1683_p2 = (tmp_55_reg_3092 & sel_tmp26_fu_1678_p2);

assign sel_tmp2_fu_1060_p2 = (tmp_37_reg_2943 & sel_tmp1_fu_1055_p2);

assign sel_tmp31_demorgan_fu_1688_p2 = (tmp_55_reg_3092 | tmp_47_reg_3069);

assign sel_tmp31_fu_1692_p2 = (sel_tmp31_demorgan_fu_1688_p2 ^ 1'd1);

assign sel_tmp32_fu_1698_p2 = (tmp_52_reg_3080 & sel_tmp31_fu_1692_p2);

assign sel_tmp33_fu_1703_p2 = (tmp_61_fu_1659_p2 ^ 1'd1);

assign sel_tmp34_fu_1709_p2 = (sel_tmp33_fu_1703_p2 & sel_tmp32_fu_1698_p2);

assign sel_tmp40_fu_1715_p2 = (tmp_61_fu_1659_p2 & sel_tmp32_fu_1698_p2);

assign sel_tmp46_demorgan_fu_1721_p2 = (tmp_52_reg_3080 | sel_tmp31_demorgan_fu_1688_p2);

assign sel_tmp46_fu_1726_p2 = (sel_tmp46_demorgan_fu_1721_p2 ^ 1'd1);

assign sel_tmp47_fu_1732_p2 = (sel_tmp46_fu_1726_p2 & icmp1_reg_3104);

assign sel_tmp6_demorgan_fu_982_p2 = (tmp_37_fu_956_p2 | tmp_31_reg_2926);

assign sel_tmp6_fu_987_p2 = (sel_tmp6_demorgan_fu_982_p2 ^ 1'd1);

assign sel_tmp7_fu_993_p2 = (tmp_34_fu_930_p2 & sel_tmp6_fu_987_p2);

assign sel_tmp8_fu_1065_p2 = (tmp_48_fu_1025_p2 ^ 1'd1);

assign sel_tmp9_fu_1071_p2 = (sel_tmp8_fu_1065_p2 & sel_tmp7_reg_2954);

assign sh_amt_1_cast_fu_1656_p1 = sh_amt_1_reg_3086;

assign sh_amt_1_fu_1622_p3 = ((tmp_52_fu_1604_p2[0:0] === 1'b1) ? tmp_53_fu_1610_p2 : tmp_54_fu_1616_p2);

assign sh_amt_cast_fu_1022_p1 = sh_amt_reg_2937;

assign sh_amt_fu_948_p3 = ((tmp_34_fu_930_p2[0:0] === 1'b1) ? tmp_35_fu_936_p2 : tmp_36_fu_942_p2);

assign storemerge_fu_1043_p3 = ((isneg_reg_2910_pp0_iter2_reg[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp32_V_1_fu_2827_p2 = p_Val2_s_54_fu_2804_p3 << num_zeros_fu_2819_p3;

assign tmp32_V_fu_2837_p1 = grp_fu_828_p1;

assign tmp_104_fu_865_p1 = ireg_V_fu_861_p1[62:0];

assign tmp_106_fu_887_p1 = ireg_V_fu_861_p1[51:0];

assign tmp_107_fu_962_p1 = man_V_2_fu_917_p3[31:0];

assign tmp_108_fu_966_p4 = {{sh_amt_fu_948_p3[11:5]}};

assign tmp_109_fu_1039_p1 = tmp_57_fu_1034_p2[31:0];

assign tmp_111_fu_2833_p1 = num_zeros_fu_2819_p3[7:0];

assign tmp_112_fu_1539_p1 = ireg_V_1_fu_1535_p1[62:0];

assign tmp_114_fu_1561_p1 = ireg_V_1_fu_1535_p1[51:0];

assign tmp_115_fu_1636_p1 = man_V_5_fu_1591_p3[31:0];

assign tmp_116_fu_1640_p4 = {{sh_amt_1_fu_1622_p3[11:5]}};

assign tmp_117_fu_1755_p1 = tmp_65_fu_1668_p2[31:0];

assign tmp_118_fu_1813_p1 = grp_fu_1807_p2[31:0];

assign tmp_119_fu_1832_p1 = counter2_1_reg_801[11:0];

assign tmp_121_10_fu_2106_p1 = tmp_124_10_fu_2101_p2;

assign tmp_121_11_fu_2154_p1 = tmp_124_11_fu_2149_p2;

assign tmp_121_12_fu_2164_p1 = tmp_124_12_fu_2159_p2;

assign tmp_121_13_fu_2212_p1 = tmp_124_13_fu_2207_p2;

assign tmp_121_14_fu_2222_p1 = tmp_124_14_fu_2217_p2;

assign tmp_121_15_fu_2270_p1 = tmp_124_15_fu_2265_p2;

assign tmp_121_16_fu_2280_p1 = tmp_124_16_fu_2275_p2;

assign tmp_121_17_fu_2328_p1 = tmp_124_17_fu_2323_p2;

assign tmp_121_18_fu_2338_p1 = tmp_124_18_fu_2333_p2;

assign tmp_121_19_fu_2386_p1 = tmp_124_19_fu_2381_p2;

assign tmp_121_1_fu_1842_p1 = tmp_124_s_fu_1836_p2;

assign tmp_121_20_fu_2396_p1 = tmp_124_20_fu_2391_p2;

assign tmp_121_21_fu_2444_p1 = tmp_124_21_fu_2439_p2;

assign tmp_121_22_fu_2454_p1 = tmp_124_22_fu_2449_p2;

assign tmp_121_23_fu_2502_p1 = tmp_124_23_fu_2497_p2;

assign tmp_121_24_fu_2512_p1 = tmp_124_24_fu_2507_p2;

assign tmp_121_25_fu_2560_p1 = tmp_124_25_fu_2555_p2;

assign tmp_121_26_fu_2570_p1 = tmp_124_26_fu_2565_p2;

assign tmp_121_27_fu_2618_p1 = tmp_124_27_fu_2613_p2;

assign tmp_121_28_fu_2628_p1 = tmp_124_28_fu_2623_p2;

assign tmp_121_29_fu_2676_p1 = tmp_124_29_fu_2671_p2;

assign tmp_121_2_fu_1864_p1 = tmp_124_1_fu_1859_p2;

assign tmp_121_30_fu_2686_p1 = tmp_124_30_fu_2681_p2;

assign tmp_121_3_fu_1874_p1 = tmp_124_2_fu_1869_p2;

assign tmp_121_4_fu_1922_p1 = tmp_124_3_fu_1917_p2;

assign tmp_121_5_fu_1932_p1 = tmp_124_4_fu_1927_p2;

assign tmp_121_6_fu_1980_p1 = tmp_124_5_fu_1975_p2;

assign tmp_121_7_fu_1990_p1 = tmp_124_6_fu_1985_p2;

assign tmp_121_8_fu_2038_p1 = tmp_124_7_fu_2033_p2;

assign tmp_121_9_fu_2048_p1 = tmp_124_8_fu_2043_p2;

assign tmp_121_s_fu_2096_p1 = tmp_124_9_fu_2091_p2;

assign tmp_124_10_fu_2101_p2 = (tmp_119_reg_3178 | 12'd11);

assign tmp_124_11_fu_2149_p2 = (tmp_119_reg_3178 | 12'd12);

assign tmp_124_12_fu_2159_p2 = (tmp_119_reg_3178 | 12'd13);

assign tmp_124_13_fu_2207_p2 = (tmp_119_reg_3178 | 12'd14);

assign tmp_124_14_fu_2217_p2 = (tmp_119_reg_3178 | 12'd15);

assign tmp_124_15_fu_2265_p2 = (tmp_119_reg_3178 | 12'd16);

assign tmp_124_16_fu_2275_p2 = (tmp_119_reg_3178 | 12'd17);

assign tmp_124_17_fu_2323_p2 = (tmp_119_reg_3178 | 12'd18);

assign tmp_124_18_fu_2333_p2 = (tmp_119_reg_3178 | 12'd19);

assign tmp_124_19_fu_2381_p2 = (tmp_119_reg_3178 | 12'd20);

assign tmp_124_1_fu_1859_p2 = (tmp_119_reg_3178 | 12'd2);

assign tmp_124_20_fu_2391_p2 = (tmp_119_reg_3178 | 12'd21);

assign tmp_124_21_fu_2439_p2 = (tmp_119_reg_3178 | 12'd22);

assign tmp_124_22_fu_2449_p2 = (tmp_119_reg_3178 | 12'd23);

assign tmp_124_23_fu_2497_p2 = (tmp_119_reg_3178 | 12'd24);

assign tmp_124_24_fu_2507_p2 = (tmp_119_reg_3178 | 12'd25);

assign tmp_124_25_fu_2555_p2 = (tmp_119_reg_3178 | 12'd26);

assign tmp_124_26_fu_2565_p2 = (tmp_119_reg_3178 | 12'd27);

assign tmp_124_27_fu_2613_p2 = (tmp_119_reg_3178 | 12'd28);

assign tmp_124_28_fu_2623_p2 = (tmp_119_reg_3178 | 12'd29);

assign tmp_124_29_fu_2671_p2 = (tmp_119_reg_3178 | 12'd30);

assign tmp_124_2_fu_1869_p2 = (tmp_119_reg_3178 | 12'd3);

assign tmp_124_30_fu_2681_p2 = (tmp_119_reg_3178 | 12'd31);

assign tmp_124_31_fu_1847_p2 = (13'd32 + counter2_1_reg_801);

assign tmp_124_3_fu_1917_p2 = (tmp_119_reg_3178 | 12'd4);

assign tmp_124_4_fu_1927_p2 = (tmp_119_reg_3178 | 12'd5);

assign tmp_124_5_fu_1975_p2 = (tmp_119_reg_3178 | 12'd6);

assign tmp_124_6_fu_1985_p2 = (tmp_119_reg_3178 | 12'd7);

assign tmp_124_7_fu_2033_p2 = (tmp_119_reg_3178 | 12'd8);

assign tmp_124_8_fu_2043_p2 = (tmp_119_reg_3178 | 12'd9);

assign tmp_124_9_fu_2091_p2 = (tmp_119_reg_3178 | 12'd10);

assign tmp_124_s_fu_1836_p2 = (tmp_119_fu_1832_p1 | 12'd1);

assign tmp_31_fu_891_p2 = ((tmp_104_fu_865_p1 == 63'd0) ? 1'b1 : 1'b0);

assign tmp_32_fu_1141_p1 = i_1_reg_756;

assign tmp_34_fu_930_p2 = (($signed(F2_fu_924_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign tmp_35_fu_936_p2 = ($signed(12'd4080) + $signed(F2_fu_924_p2));

assign tmp_36_fu_942_p2 = (12'd16 - F2_fu_924_p2);

assign tmp_37_fu_956_p2 = ((F2_fu_924_p2 == 12'd16) ? 1'b1 : 1'b0);

assign tmp_38_fu_2779_p1 = i_2_reg_811;

assign tmp_39_fu_2799_p2 = ((p_Val2_7_reg_3711 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_41_fu_2793_p2 = (32'd0 - output_temp_V_q0);

assign tmp_42_fu_2851_p2 = ((p_Result_4_fu_2841_p4 != 8'd158) ? 1'b1 : 1'b0);

assign tmp_45_fu_1571_p1 = exp_tmp_V_1_reg_3059;

assign tmp_47_fu_1565_p2 = ((tmp_112_fu_1539_p1 == 63'd0) ? 1'b1 : 1'b0);

assign tmp_48_fu_1025_p2 = ((sh_amt_reg_2937 < 12'd54) ? 1'b1 : 1'b0);

assign tmp_52_fu_1604_p2 = (($signed(F2_1_fu_1598_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign tmp_53_fu_1610_p2 = ($signed(12'd4080) + $signed(F2_1_fu_1598_p2));

assign tmp_54_fu_1616_p2 = (12'd16 - F2_1_fu_1598_p2);

assign tmp_55_fu_1630_p2 = ((F2_1_fu_1598_p2 == 12'd16) ? 1'b1 : 1'b0);

assign tmp_56_fu_1030_p1 = $unsigned(sh_amt_cast_fu_1022_p1);

assign tmp_57_fu_1034_p2 = $signed(man_V_2_reg_2932) >>> tmp_56_fu_1030_p1;

assign tmp_59_fu_1050_p2 = tmp_107_reg_2948 << sh_amt_cast_fu_1022_p1;

assign tmp_61_fu_1659_p2 = ((sh_amt_1_reg_3086 < 12'd54) ? 1'b1 : 1'b0);

assign tmp_64_fu_1664_p1 = $unsigned(sh_amt_1_cast_fu_1656_p1);

assign tmp_65_fu_1668_p2 = $signed(man_V_5_reg_3075) >>> tmp_64_fu_1664_p1;

assign tmp_66_fu_900_p3 = {{1'd1}, {tmp_106_reg_2921}};

assign tmp_67_fu_1152_p1 = $signed(reg_839);

assign tmp_69_fu_2857_p2 = ($signed(8'd142) - $signed(tmp_111_reg_3743_pp1_iter8_reg));

assign tmp_70_fu_2862_p1 = tmp_42_reg_3753;

assign tmp_71_fu_2871_p3 = {{is_neg_reg_3717_pp1_iter8_reg}, {p_Repl2_12_trunc_fu_2865_p2}};

assign tmp_72_fu_1574_p3 = {{1'd1}, {tmp_114_reg_3064}};

assign tmp_73_fu_1673_p2 = tmp_115_reg_3098 << sh_amt_1_cast_fu_1656_p1;

assign tmp_74_fu_1759_p3 = ((sel_tmp47_fu_1732_p2[0:0] === 1'b1) ? tmp_73_fu_1673_p2 : tmp_117_fu_1755_p1);

assign tmp_75_fu_1767_p3 = ((isneg_1_reg_3053[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_76_fu_1774_p3 = ((sel_tmp34_fu_1709_p2[0:0] === 1'b1) ? tmp_75_fu_1767_p3 : tmp_115_reg_3098);

assign tmp_80_fu_1781_p3 = ((or_cond3_fu_1737_p2[0:0] === 1'b1) ? tmp_74_fu_1759_p3 : tmp_76_fu_1774_p3);

assign tmp_81_cast_fu_1156_p0 = tmp_67_fu_1152_p1;

assign tmp_81_cast_fu_1156_p1 = tmp_67_fu_1152_p1;

assign tmp_81_cast_fu_1156_p2 = ($signed(tmp_81_cast_fu_1156_p0) * $signed(tmp_81_cast_fu_1156_p1));

assign tmp_81_fu_1789_p3 = ((or_cond5_fu_1749_p2[0:0] === 1'b1) ? tmp_80_fu_1781_p3 : 32'd0);

assign tmp_82_fu_1168_p3 = {{norm_V_addr_loc_reg_779}, {16'd0}};

assign tmp_83_fu_1181_p4 = {{p_Val2_s_fu_1176_p2[47:16]}};

assign tmp_85_fu_1827_p1 = counter2_1_reg_801;

assign tmp_86_fu_1232_p4 = {{p_Val2_68_2_fu_1227_p2[47:16]}};

assign tmp_89_fu_1277_p4 = {{p_Val2_68_4_fu_1272_p2[47:16]}};

assign tmp_90_10_fu_1422_p3 = {{tmp_95_fu_1412_p4}, {16'd0}};

assign tmp_90_11_fu_1445_p3 = {{tmp_96_reg_3038}, {16'd0}};

assign tmp_90_12_fu_1467_p3 = {{tmp_97_fu_1457_p4}, {16'd0}};

assign tmp_90_13_fu_1490_p3 = {{tmp_98_reg_3043}, {16'd0}};

assign tmp_90_14_fu_1512_p3 = {{tmp_99_fu_1502_p4}, {16'd0}};

assign tmp_90_1_fu_1191_p3 = {{tmp_83_fu_1181_p4}, {16'd0}};

assign tmp_90_2_fu_1220_p3 = {{tmp_84_reg_3008}, {16'd0}};

assign tmp_90_3_fu_1242_p3 = {{tmp_86_fu_1232_p4}, {16'd0}};

assign tmp_90_4_fu_1265_p3 = {{tmp_88_reg_3018}, {16'd0}};

assign tmp_90_5_fu_1287_p3 = {{tmp_89_fu_1277_p4}, {16'd0}};

assign tmp_90_6_fu_1310_p3 = {{tmp_90_reg_3023}, {16'd0}};

assign tmp_90_7_fu_1332_p3 = {{tmp_91_fu_1322_p4}, {16'd0}};

assign tmp_90_8_fu_1355_p3 = {{tmp_92_reg_3028}, {16'd0}};

assign tmp_90_9_fu_1377_p3 = {{tmp_93_fu_1367_p4}, {16'd0}};

assign tmp_90_s_fu_1400_p3 = {{tmp_94_reg_3033}, {16'd0}};

assign tmp_91_fu_1322_p4 = {{p_Val2_68_6_fu_1317_p2[47:16]}};

assign tmp_93_fu_1367_p4 = {{p_Val2_68_8_fu_1362_p2[47:16]}};

assign tmp_94_s_fu_1214_p2 = (counter_s_reg_791 + 13'd16);

assign tmp_95_fu_1412_p4 = {{p_Val2_68_s_fu_1407_p2[47:16]}};

assign tmp_97_fu_1457_p4 = {{p_Val2_68_11_fu_1452_p2[47:16]}};

assign tmp_99_fu_1502_p4 = {{p_Val2_68_13_fu_1497_p2[47:16]}};

assign tmp_fu_1017_p1 = i_reg_732_pp0_iter2_reg;

assign tmp_s_fu_897_p1 = exp_tmp_V_reg_2916;

assign v_in_V_d0 = ((or_cond2_fu_1114_p2[0:0] === 1'b1) ? newSel2_fu_1106_p3 : 32'd0);

always @ (posedge ap_clk) begin
    tmp_85_reg_3168[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    tmp_121_1_reg_3212[0] <= 1'b1;
    tmp_121_1_reg_3212[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_2_reg_3232[1] <= 1'b1;
    tmp_121_2_reg_3232[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_3_reg_3242[1:0] <= 2'b11;
    tmp_121_3_reg_3242[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_4_reg_3262[2] <= 1'b1;
    tmp_121_4_reg_3262[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_5_reg_3272[0] <= 1'b1;
    tmp_121_5_reg_3272[2:2] <= 1'b1;
    tmp_121_5_reg_3272[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_6_reg_3292[2:1] <= 2'b11;
    tmp_121_6_reg_3292[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_7_reg_3302[2:0] <= 3'b111;
    tmp_121_7_reg_3302[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_8_reg_3322[3] <= 1'b1;
    tmp_121_8_reg_3322[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_9_reg_3332[0] <= 1'b1;
    tmp_121_9_reg_3332[3:3] <= 1'b1;
    tmp_121_9_reg_3332[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_s_reg_3352[1] <= 1'b1;
    tmp_121_s_reg_3352[3:3] <= 1'b1;
    tmp_121_s_reg_3352[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_10_reg_3362[1:0] <= 2'b11;
    tmp_121_10_reg_3362[3:3] <= 1'b1;
    tmp_121_10_reg_3362[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_11_reg_3382[3:2] <= 2'b11;
    tmp_121_11_reg_3382[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_12_reg_3392[0] <= 1'b1;
    tmp_121_12_reg_3392[3:2] <= 2'b11;
    tmp_121_12_reg_3392[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_13_reg_3412[3:1] <= 3'b111;
    tmp_121_13_reg_3412[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_14_reg_3422[3:0] <= 4'b1111;
    tmp_121_14_reg_3422[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_15_reg_3442[4] <= 1'b1;
    tmp_121_15_reg_3442[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_16_reg_3452[0] <= 1'b1;
    tmp_121_16_reg_3452[4:4] <= 1'b1;
    tmp_121_16_reg_3452[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_17_reg_3472[1] <= 1'b1;
    tmp_121_17_reg_3472[4:4] <= 1'b1;
    tmp_121_17_reg_3472[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_18_reg_3482[1:0] <= 2'b11;
    tmp_121_18_reg_3482[4:4] <= 1'b1;
    tmp_121_18_reg_3482[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_19_reg_3502[2] <= 1'b1;
    tmp_121_19_reg_3502[4:4] <= 1'b1;
    tmp_121_19_reg_3502[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_20_reg_3512[0] <= 1'b1;
    tmp_121_20_reg_3512[2:2] <= 1'b1;
    tmp_121_20_reg_3512[4:4] <= 1'b1;
    tmp_121_20_reg_3512[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_21_reg_3532[2:1] <= 2'b11;
    tmp_121_21_reg_3532[4:4] <= 1'b1;
    tmp_121_21_reg_3532[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_22_reg_3542[2:0] <= 3'b111;
    tmp_121_22_reg_3542[4:4] <= 1'b1;
    tmp_121_22_reg_3542[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_23_reg_3562[4:3] <= 2'b11;
    tmp_121_23_reg_3562[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_24_reg_3572[0] <= 1'b1;
    tmp_121_24_reg_3572[4:3] <= 2'b11;
    tmp_121_24_reg_3572[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_25_reg_3592[1] <= 1'b1;
    tmp_121_25_reg_3592[4:3] <= 2'b11;
    tmp_121_25_reg_3592[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_26_reg_3602[1:0] <= 2'b11;
    tmp_121_26_reg_3602[4:3] <= 2'b11;
    tmp_121_26_reg_3602[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_27_reg_3622[4:2] <= 3'b111;
    tmp_121_27_reg_3622[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_28_reg_3632[0] <= 1'b1;
    tmp_121_28_reg_3632[4:2] <= 3'b111;
    tmp_121_28_reg_3632[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_29_reg_3652[4:1] <= 4'b1111;
    tmp_121_29_reg_3652[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_121_30_reg_3662[4:0] <= 5'b11111;
    tmp_121_30_reg_3662[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //compute_weight_2
